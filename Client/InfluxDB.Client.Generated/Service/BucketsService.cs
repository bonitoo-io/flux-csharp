/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using InfluxDB.Client.Generated.Client;
using InfluxDB.Client.Generated.Domain;

namespace InfluxDB.Client.Generated.Service
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBucketsService : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void BucketsBucketIDDelete (string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// Delete a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BucketsBucketIDDeleteWithHttpInfo (string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// Retrieve a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Bucket</returns>
        Bucket BucketsBucketIDGet (string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// Retrieve a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Bucket</returns>
        ApiResponse<Bucket> BucketsBucketIDGetWithHttpInfo (string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// list all labels for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelsResponse</returns>
        LabelsResponse BucketsBucketIDLabelsGet (string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// list all labels for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelsResponse</returns>
        ApiResponse<LabelsResponse> BucketsBucketIDLabelsGetWithHttpInfo (string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// delete a label from a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void BucketsBucketIDLabelsLabelIDDelete (string bucketID, string labelID, string zapTraceSpan = null);

        /// <summary>
        /// delete a label from a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BucketsBucketIDLabelsLabelIDDeleteWithHttpInfo (string bucketID, string labelID, string zapTraceSpan = null);
        /// <summary>
        /// add a label to a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelResponse</returns>
        LabelResponse BucketsBucketIDLabelsPost (string bucketID, LabelMapping labelMapping, string zapTraceSpan = null);

        /// <summary>
        /// add a label to a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        ApiResponse<LabelResponse> BucketsBucketIDLabelsPostWithHttpInfo (string bucketID, LabelMapping labelMapping, string zapTraceSpan = null);
        /// <summary>
        /// Retrieve operation logs for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>OperationLogs</returns>
        OperationLogs BucketsBucketIDLogsGet (string bucketID, string zapTraceSpan = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Retrieve operation logs for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>ApiResponse of OperationLogs</returns>
        ApiResponse<OperationLogs> BucketsBucketIDLogsGetWithHttpInfo (string bucketID, string zapTraceSpan = null, int? offset = null, int? limit = null);
        /// <summary>
        /// List all users with member privileges for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        ResourceMembers BucketsBucketIDMembersGet (string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// List all users with member privileges for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        ApiResponse<ResourceMembers> BucketsBucketIDMembersGetWithHttpInfo (string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// Add bucket member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        ResourceMember BucketsBucketIDMembersPost (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add bucket member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        ApiResponse<ResourceMember> BucketsBucketIDMembersPostWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes a member from an bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void BucketsBucketIDMembersUserIDDelete (string userID, string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// removes a member from an bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BucketsBucketIDMembersUserIDDeleteWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// List all owners of a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        ResourceOwners BucketsBucketIDOwnersGet (string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// List all owners of a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        ApiResponse<ResourceOwners> BucketsBucketIDOwnersGetWithHttpInfo (string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// Add bucket owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        ResourceOwner BucketsBucketIDOwnersPost (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add bucket owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        ApiResponse<ResourceOwner> BucketsBucketIDOwnersPostWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes an owner from a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void BucketsBucketIDOwnersUserIDDelete (string userID, string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// removes an owner from a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BucketsBucketIDOwnersUserIDDeleteWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// Update a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to update</param>
        /// <param name="bucket">bucket update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Bucket</returns>
        Bucket BucketsBucketIDPatch (string bucketID, Bucket bucket, string zapTraceSpan = null);

        /// <summary>
        /// Update a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to update</param>
        /// <param name="bucket">bucket update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Bucket</returns>
        ApiResponse<Bucket> BucketsBucketIDPatchWithHttpInfo (string bucketID, Bucket bucket, string zapTraceSpan = null);
        /// <summary>
        /// List all buckets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <param name="name">only returns buckets with the specified name (optional)</param>
        /// <returns>Buckets</returns>
        Buckets BucketsGet (string zapTraceSpan = null, int? offset = null, int? limit = null, string org = null, string orgID = null, string name = null);

        /// <summary>
        /// List all buckets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <param name="name">only returns buckets with the specified name (optional)</param>
        /// <returns>ApiResponse of Buckets</returns>
        ApiResponse<Buckets> BucketsGetWithHttpInfo (string zapTraceSpan = null, int? offset = null, int? limit = null, string org = null, string orgID = null, string name = null);
        /// <summary>
        /// Create a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucket">bucket to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Bucket</returns>
        Bucket BucketsPost (Bucket bucket, string zapTraceSpan = null);

        /// <summary>
        /// Create a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucket">bucket to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Bucket</returns>
        ApiResponse<Bucket> BucketsPostWithHttpInfo (Bucket bucket, string zapTraceSpan = null);
        /// <summary>
        /// Get a sources buckets (will return dbrps in the form of buckets if it is a v1 source)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceID">ID of the source</param>
        /// <param name="org">specifies the organization of the resource</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Buckets</returns>
        Buckets SourcesSourceIDBucketsGet (string sourceID, string org, string zapTraceSpan = null);

        /// <summary>
        /// Get a sources buckets (will return dbrps in the form of buckets if it is a v1 source)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceID">ID of the source</param>
        /// <param name="org">specifies the organization of the resource</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Buckets</returns>
        ApiResponse<Buckets> SourcesSourceIDBucketsGetWithHttpInfo (string sourceID, string org, string zapTraceSpan = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BucketsBucketIDDeleteAsync (string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// Delete a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BucketsBucketIDDeleteAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// Retrieve a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Bucket</returns>
        System.Threading.Tasks.Task<Bucket> BucketsBucketIDGetAsync (string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// Retrieve a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Bucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Bucket>> BucketsBucketIDGetAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// list all labels for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of LabelsResponse</returns>
        System.Threading.Tasks.Task<LabelsResponse> BucketsBucketIDLabelsGetAsync (string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// list all labels for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (LabelsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LabelsResponse>> BucketsBucketIDLabelsGetAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// delete a label from a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BucketsBucketIDLabelsLabelIDDeleteAsync (string bucketID, string labelID, string zapTraceSpan = null);

        /// <summary>
        /// delete a label from a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BucketsBucketIDLabelsLabelIDDeleteAsyncWithHttpInfo (string bucketID, string labelID, string zapTraceSpan = null);
        /// <summary>
        /// add a label to a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of LabelResponse</returns>
        System.Threading.Tasks.Task<LabelResponse> BucketsBucketIDLabelsPostAsync (string bucketID, LabelMapping labelMapping, string zapTraceSpan = null);

        /// <summary>
        /// add a label to a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LabelResponse>> BucketsBucketIDLabelsPostAsyncWithHttpInfo (string bucketID, LabelMapping labelMapping, string zapTraceSpan = null);
        /// <summary>
        /// Retrieve operation logs for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>Task of OperationLogs</returns>
        System.Threading.Tasks.Task<OperationLogs> BucketsBucketIDLogsGetAsync (string bucketID, string zapTraceSpan = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Retrieve operation logs for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (OperationLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationLogs>> BucketsBucketIDLogsGetAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null, int? offset = null, int? limit = null);
        /// <summary>
        /// List all users with member privileges for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMembers</returns>
        System.Threading.Tasks.Task<ResourceMembers> BucketsBucketIDMembersGetAsync (string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// List all users with member privileges for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> BucketsBucketIDMembersGetAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// Add bucket member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMember</returns>
        System.Threading.Tasks.Task<ResourceMember> BucketsBucketIDMembersPostAsync (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add bucket member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMember>> BucketsBucketIDMembersPostAsyncWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes a member from an bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BucketsBucketIDMembersUserIDDeleteAsync (string userID, string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// removes a member from an bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BucketsBucketIDMembersUserIDDeleteAsyncWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// List all owners of a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwners</returns>
        System.Threading.Tasks.Task<ResourceOwners> BucketsBucketIDOwnersGetAsync (string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// List all owners of a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> BucketsBucketIDOwnersGetAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// Add bucket owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwner</returns>
        System.Threading.Tasks.Task<ResourceOwner> BucketsBucketIDOwnersPostAsync (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add bucket owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> BucketsBucketIDOwnersPostAsyncWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes an owner from a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BucketsBucketIDOwnersUserIDDeleteAsync (string userID, string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// removes an owner from a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BucketsBucketIDOwnersUserIDDeleteAsyncWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// Update a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to update</param>
        /// <param name="bucket">bucket update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Bucket</returns>
        System.Threading.Tasks.Task<Bucket> BucketsBucketIDPatchAsync (string bucketID, Bucket bucket, string zapTraceSpan = null);

        /// <summary>
        /// Update a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to update</param>
        /// <param name="bucket">bucket update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Bucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Bucket>> BucketsBucketIDPatchAsyncWithHttpInfo (string bucketID, Bucket bucket, string zapTraceSpan = null);
        /// <summary>
        /// List all buckets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <param name="name">only returns buckets with the specified name (optional)</param>
        /// <returns>Task of Buckets</returns>
        System.Threading.Tasks.Task<Buckets> BucketsGetAsync (string zapTraceSpan = null, int? offset = null, int? limit = null, string org = null, string orgID = null, string name = null);

        /// <summary>
        /// List all buckets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <param name="name">only returns buckets with the specified name (optional)</param>
        /// <returns>Task of ApiResponse (Buckets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Buckets>> BucketsGetAsyncWithHttpInfo (string zapTraceSpan = null, int? offset = null, int? limit = null, string org = null, string orgID = null, string name = null);
        /// <summary>
        /// Create a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucket">bucket to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Bucket</returns>
        System.Threading.Tasks.Task<Bucket> BucketsPostAsync (Bucket bucket, string zapTraceSpan = null);

        /// <summary>
        /// Create a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucket">bucket to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Bucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Bucket>> BucketsPostAsyncWithHttpInfo (Bucket bucket, string zapTraceSpan = null);
        /// <summary>
        /// Get a sources buckets (will return dbrps in the form of buckets if it is a v1 source)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceID">ID of the source</param>
        /// <param name="org">specifies the organization of the resource</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Buckets</returns>
        System.Threading.Tasks.Task<Buckets> SourcesSourceIDBucketsGetAsync (string sourceID, string org, string zapTraceSpan = null);

        /// <summary>
        /// Get a sources buckets (will return dbrps in the form of buckets if it is a v1 source)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceID">ID of the source</param>
        /// <param name="org">specifies the organization of the resource</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Buckets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Buckets>> SourcesSourceIDBucketsGetAsyncWithHttpInfo (string sourceID, string org, string zapTraceSpan = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BucketsService : IBucketsService
    {
        private InfluxDB.Client.Generated.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BucketsService"/> class.
        /// </summary>
        /// <returns></returns>
        public BucketsService(String basePath)
        {
            this.Configuration = new InfluxDB.Client.Generated.Client.Configuration { BasePath = basePath };

            ExceptionFactory = InfluxDB.Client.Generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BucketsService"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BucketsService(InfluxDB.Client.Generated.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = InfluxDB.Client.Generated.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = InfluxDB.Client.Generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InfluxDB.Client.Generated.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InfluxDB.Client.Generated.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void BucketsBucketIDDelete (string bucketID, string zapTraceSpan = null)
        {
             BucketsBucketIDDeleteWithHttpInfo(bucketID, zapTraceSpan);
        }

        /// <summary>
        /// Delete a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BucketsBucketIDDeleteWithHttpInfo (string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDDelete");

            var localVarPath = "/buckets/{bucketID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BucketsBucketIDDeleteAsync (string bucketID, string zapTraceSpan = null)
        {
             await BucketsBucketIDDeleteAsyncWithHttpInfo(bucketID, zapTraceSpan);

        }

        /// <summary>
        /// Delete a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BucketsBucketIDDeleteAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDDelete");

            var localVarPath = "/buckets/{bucketID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Bucket</returns>
        public Bucket BucketsBucketIDGet (string bucketID, string zapTraceSpan = null)
        {
             ApiResponse<Bucket> localVarResponse = BucketsBucketIDGetWithHttpInfo(bucketID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Bucket</returns>
        public ApiResponse< Bucket > BucketsBucketIDGetWithHttpInfo (string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDGet");

            var localVarPath = "/buckets/{bucketID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Bucket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Bucket) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bucket)));
        }

        /// <summary>
        /// Retrieve a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Bucket</returns>
        public async System.Threading.Tasks.Task<Bucket> BucketsBucketIDGetAsync (string bucketID, string zapTraceSpan = null)
        {
             ApiResponse<Bucket> localVarResponse = await BucketsBucketIDGetAsyncWithHttpInfo(bucketID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Bucket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Bucket>> BucketsBucketIDGetAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDGet");

            var localVarPath = "/buckets/{bucketID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Bucket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Bucket) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bucket)));
        }

        /// <summary>
        /// list all labels for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelsResponse</returns>
        public LabelsResponse BucketsBucketIDLabelsGet (string bucketID, string zapTraceSpan = null)
        {
             ApiResponse<LabelsResponse> localVarResponse = BucketsBucketIDLabelsGetWithHttpInfo(bucketID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// list all labels for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelsResponse</returns>
        public ApiResponse< LabelsResponse > BucketsBucketIDLabelsGetWithHttpInfo (string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDLabelsGet");

            var localVarPath = "/buckets/{bucketID}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDLabelsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelsResponse)));
        }

        /// <summary>
        /// list all labels for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of LabelsResponse</returns>
        public async System.Threading.Tasks.Task<LabelsResponse> BucketsBucketIDLabelsGetAsync (string bucketID, string zapTraceSpan = null)
        {
             ApiResponse<LabelsResponse> localVarResponse = await BucketsBucketIDLabelsGetAsyncWithHttpInfo(bucketID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// list all labels for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (LabelsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LabelsResponse>> BucketsBucketIDLabelsGetAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDLabelsGet");

            var localVarPath = "/buckets/{bucketID}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDLabelsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelsResponse)));
        }

        /// <summary>
        /// delete a label from a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void BucketsBucketIDLabelsLabelIDDelete (string bucketID, string labelID, string zapTraceSpan = null)
        {
             BucketsBucketIDLabelsLabelIDDeleteWithHttpInfo(bucketID, labelID, zapTraceSpan);
        }

        /// <summary>
        /// delete a label from a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BucketsBucketIDLabelsLabelIDDeleteWithHttpInfo (string bucketID, string labelID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDLabelsLabelIDDelete");
            // verify the required parameter 'labelID' is set
            if (labelID == null)
                throw new ApiException(400, "Missing required parameter 'labelID' when calling BucketsService->BucketsBucketIDLabelsLabelIDDelete");

            var localVarPath = "/buckets/{bucketID}/labels/{labelID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (labelID != null) localVarPathParams.Add("labelID", this.Configuration.ApiClient.ParameterToString(labelID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDLabelsLabelIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// delete a label from a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BucketsBucketIDLabelsLabelIDDeleteAsync (string bucketID, string labelID, string zapTraceSpan = null)
        {
             await BucketsBucketIDLabelsLabelIDDeleteAsyncWithHttpInfo(bucketID, labelID, zapTraceSpan);

        }

        /// <summary>
        /// delete a label from a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BucketsBucketIDLabelsLabelIDDeleteAsyncWithHttpInfo (string bucketID, string labelID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDLabelsLabelIDDelete");
            // verify the required parameter 'labelID' is set
            if (labelID == null)
                throw new ApiException(400, "Missing required parameter 'labelID' when calling BucketsService->BucketsBucketIDLabelsLabelIDDelete");

            var localVarPath = "/buckets/{bucketID}/labels/{labelID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (labelID != null) localVarPathParams.Add("labelID", this.Configuration.ApiClient.ParameterToString(labelID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDLabelsLabelIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// add a label to a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelResponse</returns>
        public LabelResponse BucketsBucketIDLabelsPost (string bucketID, LabelMapping labelMapping, string zapTraceSpan = null)
        {
             ApiResponse<LabelResponse> localVarResponse = BucketsBucketIDLabelsPostWithHttpInfo(bucketID, labelMapping, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// add a label to a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        public ApiResponse< LabelResponse > BucketsBucketIDLabelsPostWithHttpInfo (string bucketID, LabelMapping labelMapping, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDLabelsPost");
            // verify the required parameter 'labelMapping' is set
            if (labelMapping == null)
                throw new ApiException(400, "Missing required parameter 'labelMapping' when calling BucketsService->BucketsBucketIDLabelsPost");

            var localVarPath = "/buckets/{bucketID}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (labelMapping != null && labelMapping.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(labelMapping); // http body (model) parameter
            }
            else
            {
                localVarPostBody = labelMapping; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDLabelsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelResponse)));
        }

        /// <summary>
        /// add a label to a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of LabelResponse</returns>
        public async System.Threading.Tasks.Task<LabelResponse> BucketsBucketIDLabelsPostAsync (string bucketID, LabelMapping labelMapping, string zapTraceSpan = null)
        {
             ApiResponse<LabelResponse> localVarResponse = await BucketsBucketIDLabelsPostAsyncWithHttpInfo(bucketID, labelMapping, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// add a label to a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LabelResponse>> BucketsBucketIDLabelsPostAsyncWithHttpInfo (string bucketID, LabelMapping labelMapping, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDLabelsPost");
            // verify the required parameter 'labelMapping' is set
            if (labelMapping == null)
                throw new ApiException(400, "Missing required parameter 'labelMapping' when calling BucketsService->BucketsBucketIDLabelsPost");

            var localVarPath = "/buckets/{bucketID}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (labelMapping != null && labelMapping.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(labelMapping); // http body (model) parameter
            }
            else
            {
                localVarPostBody = labelMapping; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDLabelsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelResponse)));
        }

        /// <summary>
        /// Retrieve operation logs for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>OperationLogs</returns>
        public OperationLogs BucketsBucketIDLogsGet (string bucketID, string zapTraceSpan = null, int? offset = null, int? limit = null)
        {
             ApiResponse<OperationLogs> localVarResponse = BucketsBucketIDLogsGetWithHttpInfo(bucketID, zapTraceSpan, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve operation logs for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>ApiResponse of OperationLogs</returns>
        public ApiResponse< OperationLogs > BucketsBucketIDLogsGetWithHttpInfo (string bucketID, string zapTraceSpan = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDLogsGet");

            var localVarPath = "/buckets/{bucketID}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDLogsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationLogs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationLogs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationLogs)));
        }

        /// <summary>
        /// Retrieve operation logs for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>Task of OperationLogs</returns>
        public async System.Threading.Tasks.Task<OperationLogs> BucketsBucketIDLogsGetAsync (string bucketID, string zapTraceSpan = null, int? offset = null, int? limit = null)
        {
             ApiResponse<OperationLogs> localVarResponse = await BucketsBucketIDLogsGetAsyncWithHttpInfo(bucketID, zapTraceSpan, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve operation logs for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (OperationLogs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationLogs>> BucketsBucketIDLogsGetAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDLogsGet");

            var localVarPath = "/buckets/{bucketID}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDLogsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationLogs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationLogs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationLogs)));
        }

        /// <summary>
        /// List all users with member privileges for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        public ResourceMembers BucketsBucketIDMembersGet (string bucketID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMembers> localVarResponse = BucketsBucketIDMembersGetWithHttpInfo(bucketID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all users with member privileges for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        public ApiResponse< ResourceMembers > BucketsBucketIDMembersGetWithHttpInfo (string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDMembersGet");

            var localVarPath = "/buckets/{bucketID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMembers)));
        }

        /// <summary>
        /// List all users with member privileges for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMembers</returns>
        public async System.Threading.Tasks.Task<ResourceMembers> BucketsBucketIDMembersGetAsync (string bucketID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMembers> localVarResponse = await BucketsBucketIDMembersGetAsyncWithHttpInfo(bucketID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all users with member privileges for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> BucketsBucketIDMembersGetAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDMembersGet");

            var localVarPath = "/buckets/{bucketID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMembers)));
        }

        /// <summary>
        /// Add bucket member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        public ResourceMember BucketsBucketIDMembersPost (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMember> localVarResponse = BucketsBucketIDMembersPostWithHttpInfo(bucketID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add bucket member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        public ApiResponse< ResourceMember > BucketsBucketIDMembersPostWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDMembersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling BucketsService->BucketsBucketIDMembersPost");

            var localVarPath = "/buckets/{bucketID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMember)));
        }

        /// <summary>
        /// Add bucket member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMember</returns>
        public async System.Threading.Tasks.Task<ResourceMember> BucketsBucketIDMembersPostAsync (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMember> localVarResponse = await BucketsBucketIDMembersPostAsyncWithHttpInfo(bucketID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add bucket member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceMember>> BucketsBucketIDMembersPostAsyncWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDMembersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling BucketsService->BucketsBucketIDMembersPost");

            var localVarPath = "/buckets/{bucketID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMember)));
        }

        /// <summary>
        /// removes a member from an bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void BucketsBucketIDMembersUserIDDelete (string userID, string bucketID, string zapTraceSpan = null)
        {
             BucketsBucketIDMembersUserIDDeleteWithHttpInfo(userID, bucketID, zapTraceSpan);
        }

        /// <summary>
        /// removes a member from an bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BucketsBucketIDMembersUserIDDeleteWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling BucketsService->BucketsBucketIDMembersUserIDDelete");
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDMembersUserIDDelete");

            var localVarPath = "/buckets/{bucketID}/members/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDMembersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// removes a member from an bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BucketsBucketIDMembersUserIDDeleteAsync (string userID, string bucketID, string zapTraceSpan = null)
        {
             await BucketsBucketIDMembersUserIDDeleteAsyncWithHttpInfo(userID, bucketID, zapTraceSpan);

        }

        /// <summary>
        /// removes a member from an bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BucketsBucketIDMembersUserIDDeleteAsyncWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling BucketsService->BucketsBucketIDMembersUserIDDelete");
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDMembersUserIDDelete");

            var localVarPath = "/buckets/{bucketID}/members/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDMembersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all owners of a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        public ResourceOwners BucketsBucketIDOwnersGet (string bucketID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwners> localVarResponse = BucketsBucketIDOwnersGetWithHttpInfo(bucketID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all owners of a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        public ApiResponse< ResourceOwners > BucketsBucketIDOwnersGetWithHttpInfo (string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDOwnersGet");

            var localVarPath = "/buckets/{bucketID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwners>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwners) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwners)));
        }

        /// <summary>
        /// List all owners of a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwners</returns>
        public async System.Threading.Tasks.Task<ResourceOwners> BucketsBucketIDOwnersGetAsync (string bucketID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwners> localVarResponse = await BucketsBucketIDOwnersGetAsyncWithHttpInfo(bucketID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all owners of a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> BucketsBucketIDOwnersGetAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDOwnersGet");

            var localVarPath = "/buckets/{bucketID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwners>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwners) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwners)));
        }

        /// <summary>
        /// Add bucket owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        public ResourceOwner BucketsBucketIDOwnersPost (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwner> localVarResponse = BucketsBucketIDOwnersPostWithHttpInfo(bucketID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add bucket owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        public ApiResponse< ResourceOwner > BucketsBucketIDOwnersPostWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDOwnersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling BucketsService->BucketsBucketIDOwnersPost");

            var localVarPath = "/buckets/{bucketID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDOwnersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwner)));
        }

        /// <summary>
        /// Add bucket owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwner</returns>
        public async System.Threading.Tasks.Task<ResourceOwner> BucketsBucketIDOwnersPostAsync (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwner> localVarResponse = await BucketsBucketIDOwnersPostAsyncWithHttpInfo(bucketID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add bucket owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> BucketsBucketIDOwnersPostAsyncWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDOwnersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling BucketsService->BucketsBucketIDOwnersPost");

            var localVarPath = "/buckets/{bucketID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDOwnersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwner)));
        }

        /// <summary>
        /// removes an owner from a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void BucketsBucketIDOwnersUserIDDelete (string userID, string bucketID, string zapTraceSpan = null)
        {
             BucketsBucketIDOwnersUserIDDeleteWithHttpInfo(userID, bucketID, zapTraceSpan);
        }

        /// <summary>
        /// removes an owner from a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BucketsBucketIDOwnersUserIDDeleteWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling BucketsService->BucketsBucketIDOwnersUserIDDelete");
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDOwnersUserIDDelete");

            var localVarPath = "/buckets/{bucketID}/owners/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDOwnersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// removes an owner from a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BucketsBucketIDOwnersUserIDDeleteAsync (string userID, string bucketID, string zapTraceSpan = null)
        {
             await BucketsBucketIDOwnersUserIDDeleteAsyncWithHttpInfo(userID, bucketID, zapTraceSpan);

        }

        /// <summary>
        /// removes an owner from a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BucketsBucketIDOwnersUserIDDeleteAsyncWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling BucketsService->BucketsBucketIDOwnersUserIDDelete");
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDOwnersUserIDDelete");

            var localVarPath = "/buckets/{bucketID}/owners/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDOwnersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to update</param>
        /// <param name="bucket">bucket update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Bucket</returns>
        public Bucket BucketsBucketIDPatch (string bucketID, Bucket bucket, string zapTraceSpan = null)
        {
             ApiResponse<Bucket> localVarResponse = BucketsBucketIDPatchWithHttpInfo(bucketID, bucket, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to update</param>
        /// <param name="bucket">bucket update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Bucket</returns>
        public ApiResponse< Bucket > BucketsBucketIDPatchWithHttpInfo (string bucketID, Bucket bucket, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDPatch");
            // verify the required parameter 'bucket' is set
            if (bucket == null)
                throw new ApiException(400, "Missing required parameter 'bucket' when calling BucketsService->BucketsBucketIDPatch");

            var localVarPath = "/buckets/{bucketID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (bucket != null && bucket.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bucket); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bucket; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Bucket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Bucket) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bucket)));
        }

        /// <summary>
        /// Update a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to update</param>
        /// <param name="bucket">bucket update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Bucket</returns>
        public async System.Threading.Tasks.Task<Bucket> BucketsBucketIDPatchAsync (string bucketID, Bucket bucket, string zapTraceSpan = null)
        {
             ApiResponse<Bucket> localVarResponse = await BucketsBucketIDPatchAsyncWithHttpInfo(bucketID, bucket, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of bucket to update</param>
        /// <param name="bucket">bucket update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Bucket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Bucket>> BucketsBucketIDPatchAsyncWithHttpInfo (string bucketID, Bucket bucket, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling BucketsService->BucketsBucketIDPatch");
            // verify the required parameter 'bucket' is set
            if (bucket == null)
                throw new ApiException(400, "Missing required parameter 'bucket' when calling BucketsService->BucketsBucketIDPatch");

            var localVarPath = "/buckets/{bucketID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (bucket != null && bucket.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bucket); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bucket; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Bucket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Bucket) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bucket)));
        }

        /// <summary>
        /// List all buckets 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <param name="name">only returns buckets with the specified name (optional)</param>
        /// <returns>Buckets</returns>
        public Buckets BucketsGet (string zapTraceSpan = null, int? offset = null, int? limit = null, string org = null, string orgID = null, string name = null)
        {
             ApiResponse<Buckets> localVarResponse = BucketsGetWithHttpInfo(zapTraceSpan, offset, limit, org, orgID, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all buckets 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <param name="name">only returns buckets with the specified name (optional)</param>
        /// <returns>ApiResponse of Buckets</returns>
        public ApiResponse< Buckets > BucketsGetWithHttpInfo (string zapTraceSpan = null, int? offset = null, int? limit = null, string org = null, string orgID = null, string name = null)
        {

            var localVarPath = "/buckets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (org != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            if (orgID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Buckets>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Buckets) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Buckets)));
        }

        /// <summary>
        /// List all buckets 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <param name="name">only returns buckets with the specified name (optional)</param>
        /// <returns>Task of Buckets</returns>
        public async System.Threading.Tasks.Task<Buckets> BucketsGetAsync (string zapTraceSpan = null, int? offset = null, int? limit = null, string org = null, string orgID = null, string name = null)
        {
             ApiResponse<Buckets> localVarResponse = await BucketsGetAsyncWithHttpInfo(zapTraceSpan, offset, limit, org, orgID, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all buckets 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <param name="name">only returns buckets with the specified name (optional)</param>
        /// <returns>Task of ApiResponse (Buckets)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Buckets>> BucketsGetAsyncWithHttpInfo (string zapTraceSpan = null, int? offset = null, int? limit = null, string org = null, string orgID = null, string name = null)
        {

            var localVarPath = "/buckets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (org != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            if (orgID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Buckets>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Buckets) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Buckets)));
        }

        /// <summary>
        /// Create a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucket">bucket to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Bucket</returns>
        public Bucket BucketsPost (Bucket bucket, string zapTraceSpan = null)
        {
             ApiResponse<Bucket> localVarResponse = BucketsPostWithHttpInfo(bucket, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucket">bucket to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Bucket</returns>
        public ApiResponse< Bucket > BucketsPostWithHttpInfo (Bucket bucket, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucket' is set
            if (bucket == null)
                throw new ApiException(400, "Missing required parameter 'bucket' when calling BucketsService->BucketsPost");

            var localVarPath = "/buckets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (bucket != null && bucket.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bucket); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bucket; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Bucket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Bucket) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bucket)));
        }

        /// <summary>
        /// Create a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucket">bucket to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Bucket</returns>
        public async System.Threading.Tasks.Task<Bucket> BucketsPostAsync (Bucket bucket, string zapTraceSpan = null)
        {
             ApiResponse<Bucket> localVarResponse = await BucketsPostAsyncWithHttpInfo(bucket, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucket">bucket to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Bucket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Bucket>> BucketsPostAsyncWithHttpInfo (Bucket bucket, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucket' is set
            if (bucket == null)
                throw new ApiException(400, "Missing required parameter 'bucket' when calling BucketsService->BucketsPost");

            var localVarPath = "/buckets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (bucket != null && bucket.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bucket); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bucket; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Bucket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Bucket) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bucket)));
        }

        /// <summary>
        /// Get a sources buckets (will return dbrps in the form of buckets if it is a v1 source) 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceID">ID of the source</param>
        /// <param name="org">specifies the organization of the resource</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Buckets</returns>
        public Buckets SourcesSourceIDBucketsGet (string sourceID, string org, string zapTraceSpan = null)
        {
             ApiResponse<Buckets> localVarResponse = SourcesSourceIDBucketsGetWithHttpInfo(sourceID, org, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a sources buckets (will return dbrps in the form of buckets if it is a v1 source) 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceID">ID of the source</param>
        /// <param name="org">specifies the organization of the resource</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Buckets</returns>
        public ApiResponse< Buckets > SourcesSourceIDBucketsGetWithHttpInfo (string sourceID, string org, string zapTraceSpan = null)
        {
            // verify the required parameter 'sourceID' is set
            if (sourceID == null)
                throw new ApiException(400, "Missing required parameter 'sourceID' when calling BucketsService->SourcesSourceIDBucketsGet");
            // verify the required parameter 'org' is set
            if (org == null)
                throw new ApiException(400, "Missing required parameter 'org' when calling BucketsService->SourcesSourceIDBucketsGet");

            var localVarPath = "/sources/{sourceID}/buckets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceID != null) localVarPathParams.Add("sourceID", this.Configuration.ApiClient.ParameterToString(sourceID)); // path parameter
            if (org != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SourcesSourceIDBucketsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Buckets>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Buckets) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Buckets)));
        }

        /// <summary>
        /// Get a sources buckets (will return dbrps in the form of buckets if it is a v1 source) 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceID">ID of the source</param>
        /// <param name="org">specifies the organization of the resource</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Buckets</returns>
        public async System.Threading.Tasks.Task<Buckets> SourcesSourceIDBucketsGetAsync (string sourceID, string org, string zapTraceSpan = null)
        {
             ApiResponse<Buckets> localVarResponse = await SourcesSourceIDBucketsGetAsyncWithHttpInfo(sourceID, org, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a sources buckets (will return dbrps in the form of buckets if it is a v1 source) 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceID">ID of the source</param>
        /// <param name="org">specifies the organization of the resource</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Buckets)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Buckets>> SourcesSourceIDBucketsGetAsyncWithHttpInfo (string sourceID, string org, string zapTraceSpan = null)
        {
            // verify the required parameter 'sourceID' is set
            if (sourceID == null)
                throw new ApiException(400, "Missing required parameter 'sourceID' when calling BucketsService->SourcesSourceIDBucketsGet");
            // verify the required parameter 'org' is set
            if (org == null)
                throw new ApiException(400, "Missing required parameter 'org' when calling BucketsService->SourcesSourceIDBucketsGet");

            var localVarPath = "/sources/{sourceID}/buckets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceID != null) localVarPathParams.Add("sourceID", this.Configuration.ApiClient.ParameterToString(sourceID)); // path parameter
            if (org != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SourcesSourceIDBucketsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Buckets>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Buckets) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Buckets)));
        }

    }
}
