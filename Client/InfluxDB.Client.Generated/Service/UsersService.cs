/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using InfluxDB.Client.Generated.Client;
using InfluxDB.Client.Generated.Domain;

namespace InfluxDB.Client.Generated.Service
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersService : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all users with member privileges for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        ResourceMembers BucketsBucketIDMembersGet (string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// List all users with member privileges for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        ApiResponse<ResourceMembers> BucketsBucketIDMembersGetWithHttpInfo (string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// Add bucket member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        ResourceMember BucketsBucketIDMembersPost (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add bucket member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        ApiResponse<ResourceMember> BucketsBucketIDMembersPostWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes a member from an bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void BucketsBucketIDMembersUserIDDelete (string userID, string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// removes a member from an bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BucketsBucketIDMembersUserIDDeleteWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// List all owners of a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        ResourceOwners BucketsBucketIDOwnersGet (string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// List all owners of a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        ApiResponse<ResourceOwners> BucketsBucketIDOwnersGetWithHttpInfo (string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// Add bucket owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        ResourceOwner BucketsBucketIDOwnersPost (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add bucket owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        ApiResponse<ResourceOwner> BucketsBucketIDOwnersPostWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes an owner from a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void BucketsBucketIDOwnersUserIDDelete (string userID, string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// removes an owner from a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BucketsBucketIDOwnersUserIDDeleteWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// List all dashboard members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        ResourceMembers DashboardsDashboardIDMembersGet (string dashboardID, string zapTraceSpan = null);

        /// <summary>
        /// List all dashboard members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        ApiResponse<ResourceMembers> DashboardsDashboardIDMembersGetWithHttpInfo (string dashboardID, string zapTraceSpan = null);
        /// <summary>
        /// Add dashboard member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        ResourceMember DashboardsDashboardIDMembersPost (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add dashboard member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        ApiResponse<ResourceMember> DashboardsDashboardIDMembersPostWithHttpInfo (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes a member from an dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DashboardsDashboardIDMembersUserIDDelete (string userID, string dashboardID, string zapTraceSpan = null);

        /// <summary>
        /// removes a member from an dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DashboardsDashboardIDMembersUserIDDeleteWithHttpInfo (string userID, string dashboardID, string zapTraceSpan = null);
        /// <summary>
        /// List all dashboard owners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        ResourceOwners DashboardsDashboardIDOwnersGet (string dashboardID, string zapTraceSpan = null);

        /// <summary>
        /// List all dashboard owners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        ApiResponse<ResourceOwners> DashboardsDashboardIDOwnersGetWithHttpInfo (string dashboardID, string zapTraceSpan = null);
        /// <summary>
        /// Add dashboard owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        ResourceOwner DashboardsDashboardIDOwnersPost (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add dashboard owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        ApiResponse<ResourceOwner> DashboardsDashboardIDOwnersPostWithHttpInfo (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes an owner from a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DashboardsDashboardIDOwnersUserIDDelete (string userID, string dashboardID, string zapTraceSpan = null);

        /// <summary>
        /// removes an owner from a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DashboardsDashboardIDOwnersUserIDDeleteWithHttpInfo (string userID, string dashboardID, string zapTraceSpan = null);
        /// <summary>
        /// Returns currently authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>User</returns>
        User MeGet (string zapTraceSpan = null);

        /// <summary>
        /// Returns currently authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> MeGetWithHttpInfo (string zapTraceSpan = null);
        /// <summary>
        /// Update password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns></returns>
        void MePasswordPut (PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null);

        /// <summary>
        /// Update password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MePasswordPutWithHttpInfo (PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null);
        /// <summary>
        /// List all members of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        ResourceMembers OrgsOrgIDMembersGet (string orgID, string zapTraceSpan = null);

        /// <summary>
        /// List all members of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        ApiResponse<ResourceMembers> OrgsOrgIDMembersGetWithHttpInfo (string orgID, string zapTraceSpan = null);
        /// <summary>
        /// Add organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        ResourceMember OrgsOrgIDMembersPost (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        ApiResponse<ResourceMember> OrgsOrgIDMembersPostWithHttpInfo (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes a member from an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void OrgsOrgIDMembersUserIDDelete (string userID, string orgID, string zapTraceSpan = null);

        /// <summary>
        /// removes a member from an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrgsOrgIDMembersUserIDDeleteWithHttpInfo (string userID, string orgID, string zapTraceSpan = null);
        /// <summary>
        /// List all owners of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        ResourceOwners OrgsOrgIDOwnersGet (string orgID, string zapTraceSpan = null);

        /// <summary>
        /// List all owners of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        ApiResponse<ResourceOwners> OrgsOrgIDOwnersGetWithHttpInfo (string orgID, string zapTraceSpan = null);
        /// <summary>
        /// Add organization owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        ResourceOwner OrgsOrgIDOwnersPost (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add organization owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        ApiResponse<ResourceOwner> OrgsOrgIDOwnersPostWithHttpInfo (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes an owner from an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void OrgsOrgIDOwnersUserIDDelete (string userID, string orgID, string zapTraceSpan = null);

        /// <summary>
        /// removes an owner from an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrgsOrgIDOwnersUserIDDeleteWithHttpInfo (string userID, string orgID, string zapTraceSpan = null);
        /// <summary>
        /// List all users with member privileges for a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        ResourceMembers ScrapersScraperTargetIDMembersGet (string scraperTargetID, string zapTraceSpan = null);

        /// <summary>
        /// List all users with member privileges for a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        ApiResponse<ResourceMembers> ScrapersScraperTargetIDMembersGetWithHttpInfo (string scraperTargetID, string zapTraceSpan = null);
        /// <summary>
        /// Add scraper target member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        ResourceMember ScrapersScraperTargetIDMembersPost (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add scraper target member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        ApiResponse<ResourceMember> ScrapersScraperTargetIDMembersPostWithHttpInfo (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes a member from a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void ScrapersScraperTargetIDMembersUserIDDelete (string userID, string scraperTargetID, string zapTraceSpan = null);

        /// <summary>
        /// removes a member from a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScrapersScraperTargetIDMembersUserIDDeleteWithHttpInfo (string userID, string scraperTargetID, string zapTraceSpan = null);
        /// <summary>
        /// List all owners of a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        ResourceOwners ScrapersScraperTargetIDOwnersGet (string scraperTargetID, string zapTraceSpan = null);

        /// <summary>
        /// List all owners of a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        ApiResponse<ResourceOwners> ScrapersScraperTargetIDOwnersGetWithHttpInfo (string scraperTargetID, string zapTraceSpan = null);
        /// <summary>
        /// Add scraper target owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        ResourceOwner ScrapersScraperTargetIDOwnersPost (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add scraper target owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        ApiResponse<ResourceOwner> ScrapersScraperTargetIDOwnersPostWithHttpInfo (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes an owner from a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void ScrapersScraperTargetIDOwnersUserIDDelete (string userID, string scraperTargetID, string zapTraceSpan = null);

        /// <summary>
        /// removes an owner from a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScrapersScraperTargetIDOwnersUserIDDeleteWithHttpInfo (string userID, string scraperTargetID, string zapTraceSpan = null);
        /// <summary>
        /// List all task members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        ResourceMembers TasksTaskIDMembersGet (string taskID, string zapTraceSpan = null);

        /// <summary>
        /// List all task members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        ApiResponse<ResourceMembers> TasksTaskIDMembersGetWithHttpInfo (string taskID, string zapTraceSpan = null);
        /// <summary>
        /// Add task member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        ResourceMember TasksTaskIDMembersPost (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add task member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        ApiResponse<ResourceMember> TasksTaskIDMembersPostWithHttpInfo (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes a member from an task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void TasksTaskIDMembersUserIDDelete (string userID, string taskID, string zapTraceSpan = null);

        /// <summary>
        /// removes a member from an task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TasksTaskIDMembersUserIDDeleteWithHttpInfo (string userID, string taskID, string zapTraceSpan = null);
        /// <summary>
        /// List all task owners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        ResourceOwners TasksTaskIDOwnersGet (string taskID, string zapTraceSpan = null);

        /// <summary>
        /// List all task owners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        ApiResponse<ResourceOwners> TasksTaskIDOwnersGetWithHttpInfo (string taskID, string zapTraceSpan = null);
        /// <summary>
        /// Add task owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        ResourceOwner TasksTaskIDOwnersPost (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add task owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        ApiResponse<ResourceOwner> TasksTaskIDOwnersPostWithHttpInfo (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes an owner from an task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void TasksTaskIDOwnersUserIDDelete (string userID, string taskID, string zapTraceSpan = null);

        /// <summary>
        /// removes an owner from an task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TasksTaskIDOwnersUserIDDeleteWithHttpInfo (string userID, string taskID, string zapTraceSpan = null);
        /// <summary>
        /// List all users with member privileges for a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        ResourceMembers TelegrafsTelegrafIDMembersGet (string telegrafID, string zapTraceSpan = null);

        /// <summary>
        /// List all users with member privileges for a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        ApiResponse<ResourceMembers> TelegrafsTelegrafIDMembersGetWithHttpInfo (string telegrafID, string zapTraceSpan = null);
        /// <summary>
        /// Add telegraf config member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        ResourceMember TelegrafsTelegrafIDMembersPost (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add telegraf config member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        ApiResponse<ResourceMember> TelegrafsTelegrafIDMembersPostWithHttpInfo (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes a member from a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="telegrafID">ID of the telegraf</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void TelegrafsTelegrafIDMembersUserIDDelete (string userID, string telegrafID, string zapTraceSpan = null);

        /// <summary>
        /// removes a member from a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="telegrafID">ID of the telegraf</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TelegrafsTelegrafIDMembersUserIDDeleteWithHttpInfo (string userID, string telegrafID, string zapTraceSpan = null);
        /// <summary>
        /// List all owners of a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        ResourceOwners TelegrafsTelegrafIDOwnersGet (string telegrafID, string zapTraceSpan = null);

        /// <summary>
        /// List all owners of a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        ApiResponse<ResourceOwners> TelegrafsTelegrafIDOwnersGetWithHttpInfo (string telegrafID, string zapTraceSpan = null);
        /// <summary>
        /// Add telegraf config owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        ResourceOwner TelegrafsTelegrafIDOwnersPost (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add telegraf config owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        ApiResponse<ResourceOwner> TelegrafsTelegrafIDOwnersPostWithHttpInfo (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes an owner from a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void TelegrafsTelegrafIDOwnersUserIDDelete (string userID, string telegrafID, string zapTraceSpan = null);

        /// <summary>
        /// removes an owner from a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TelegrafsTelegrafIDOwnersUserIDDeleteWithHttpInfo (string userID, string telegrafID, string zapTraceSpan = null);
        /// <summary>
        /// List all users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Users</returns>
        Users UsersGet (string zapTraceSpan = null);

        /// <summary>
        /// List all users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Users</returns>
        ApiResponse<Users> UsersGetWithHttpInfo (string zapTraceSpan = null);
        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">user to create</param>
        /// <returns>User</returns>
        User UsersPost (User user);

        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">user to create</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UsersPostWithHttpInfo (User user);
        /// <summary>
        /// deletes a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void UsersUserIDDelete (string userID, string zapTraceSpan = null);

        /// <summary>
        /// deletes a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersUserIDDeleteWithHttpInfo (string userID, string zapTraceSpan = null);
        /// <summary>
        /// Retrieve a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>User</returns>
        User UsersUserIDGet (string userID, string zapTraceSpan = null);

        /// <summary>
        /// Retrieve a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UsersUserIDGetWithHttpInfo (string userID, string zapTraceSpan = null);
        /// <summary>
        /// Retrieve operation logs for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>OperationLogs</returns>
        OperationLogs UsersUserIDLogsGet (string userID, string zapTraceSpan = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Retrieve operation logs for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>ApiResponse of OperationLogs</returns>
        ApiResponse<OperationLogs> UsersUserIDLogsGetWithHttpInfo (string userID, string zapTraceSpan = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Update password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns></returns>
        void UsersUserIDPasswordPut (string userID, PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null);

        /// <summary>
        /// Update password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersUserIDPasswordPutWithHttpInfo (string userID, PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null);
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to update</param>
        /// <param name="user">user update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>User</returns>
        User UsersUserIDPatch (string userID, User user, string zapTraceSpan = null);

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to update</param>
        /// <param name="user">user update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UsersUserIDPatchWithHttpInfo (string userID, User user, string zapTraceSpan = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List all users with member privileges for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMembers</returns>
        System.Threading.Tasks.Task<ResourceMembers> BucketsBucketIDMembersGetAsync (string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// List all users with member privileges for a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> BucketsBucketIDMembersGetAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// Add bucket member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMember</returns>
        System.Threading.Tasks.Task<ResourceMember> BucketsBucketIDMembersPostAsync (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add bucket member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMember>> BucketsBucketIDMembersPostAsyncWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes a member from an bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BucketsBucketIDMembersUserIDDeleteAsync (string userID, string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// removes a member from an bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BucketsBucketIDMembersUserIDDeleteAsyncWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// List all owners of a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwners</returns>
        System.Threading.Tasks.Task<ResourceOwners> BucketsBucketIDOwnersGetAsync (string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// List all owners of a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> BucketsBucketIDOwnersGetAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// Add bucket owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwner</returns>
        System.Threading.Tasks.Task<ResourceOwner> BucketsBucketIDOwnersPostAsync (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add bucket owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> BucketsBucketIDOwnersPostAsyncWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes an owner from a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BucketsBucketIDOwnersUserIDDeleteAsync (string userID, string bucketID, string zapTraceSpan = null);

        /// <summary>
        /// removes an owner from a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BucketsBucketIDOwnersUserIDDeleteAsyncWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null);
        /// <summary>
        /// List all dashboard members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMembers</returns>
        System.Threading.Tasks.Task<ResourceMembers> DashboardsDashboardIDMembersGetAsync (string dashboardID, string zapTraceSpan = null);

        /// <summary>
        /// List all dashboard members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> DashboardsDashboardIDMembersGetAsyncWithHttpInfo (string dashboardID, string zapTraceSpan = null);
        /// <summary>
        /// Add dashboard member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMember</returns>
        System.Threading.Tasks.Task<ResourceMember> DashboardsDashboardIDMembersPostAsync (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add dashboard member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMember>> DashboardsDashboardIDMembersPostAsyncWithHttpInfo (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes a member from an dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DashboardsDashboardIDMembersUserIDDeleteAsync (string userID, string dashboardID, string zapTraceSpan = null);

        /// <summary>
        /// removes a member from an dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsDashboardIDMembersUserIDDeleteAsyncWithHttpInfo (string userID, string dashboardID, string zapTraceSpan = null);
        /// <summary>
        /// List all dashboard owners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwners</returns>
        System.Threading.Tasks.Task<ResourceOwners> DashboardsDashboardIDOwnersGetAsync (string dashboardID, string zapTraceSpan = null);

        /// <summary>
        /// List all dashboard owners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> DashboardsDashboardIDOwnersGetAsyncWithHttpInfo (string dashboardID, string zapTraceSpan = null);
        /// <summary>
        /// Add dashboard owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwner</returns>
        System.Threading.Tasks.Task<ResourceOwner> DashboardsDashboardIDOwnersPostAsync (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add dashboard owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> DashboardsDashboardIDOwnersPostAsyncWithHttpInfo (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes an owner from a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DashboardsDashboardIDOwnersUserIDDeleteAsync (string userID, string dashboardID, string zapTraceSpan = null);

        /// <summary>
        /// removes an owner from a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsDashboardIDOwnersUserIDDeleteAsyncWithHttpInfo (string userID, string dashboardID, string zapTraceSpan = null);
        /// <summary>
        /// Returns currently authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> MeGetAsync (string zapTraceSpan = null);

        /// <summary>
        /// Returns currently authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> MeGetAsyncWithHttpInfo (string zapTraceSpan = null);
        /// <summary>
        /// Update password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MePasswordPutAsync (PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null);

        /// <summary>
        /// Update password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MePasswordPutAsyncWithHttpInfo (PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null);
        /// <summary>
        /// List all members of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMembers</returns>
        System.Threading.Tasks.Task<ResourceMembers> OrgsOrgIDMembersGetAsync (string orgID, string zapTraceSpan = null);

        /// <summary>
        /// List all members of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> OrgsOrgIDMembersGetAsyncWithHttpInfo (string orgID, string zapTraceSpan = null);
        /// <summary>
        /// Add organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMember</returns>
        System.Threading.Tasks.Task<ResourceMember> OrgsOrgIDMembersPostAsync (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMember>> OrgsOrgIDMembersPostAsyncWithHttpInfo (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes a member from an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrgsOrgIDMembersUserIDDeleteAsync (string userID, string orgID, string zapTraceSpan = null);

        /// <summary>
        /// removes a member from an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrgsOrgIDMembersUserIDDeleteAsyncWithHttpInfo (string userID, string orgID, string zapTraceSpan = null);
        /// <summary>
        /// List all owners of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwners</returns>
        System.Threading.Tasks.Task<ResourceOwners> OrgsOrgIDOwnersGetAsync (string orgID, string zapTraceSpan = null);

        /// <summary>
        /// List all owners of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> OrgsOrgIDOwnersGetAsyncWithHttpInfo (string orgID, string zapTraceSpan = null);
        /// <summary>
        /// Add organization owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwner</returns>
        System.Threading.Tasks.Task<ResourceOwner> OrgsOrgIDOwnersPostAsync (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add organization owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> OrgsOrgIDOwnersPostAsyncWithHttpInfo (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes an owner from an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrgsOrgIDOwnersUserIDDeleteAsync (string userID, string orgID, string zapTraceSpan = null);

        /// <summary>
        /// removes an owner from an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrgsOrgIDOwnersUserIDDeleteAsyncWithHttpInfo (string userID, string orgID, string zapTraceSpan = null);
        /// <summary>
        /// List all users with member privileges for a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMembers</returns>
        System.Threading.Tasks.Task<ResourceMembers> ScrapersScraperTargetIDMembersGetAsync (string scraperTargetID, string zapTraceSpan = null);

        /// <summary>
        /// List all users with member privileges for a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> ScrapersScraperTargetIDMembersGetAsyncWithHttpInfo (string scraperTargetID, string zapTraceSpan = null);
        /// <summary>
        /// Add scraper target member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMember</returns>
        System.Threading.Tasks.Task<ResourceMember> ScrapersScraperTargetIDMembersPostAsync (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add scraper target member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMember>> ScrapersScraperTargetIDMembersPostAsyncWithHttpInfo (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes a member from a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScrapersScraperTargetIDMembersUserIDDeleteAsync (string userID, string scraperTargetID, string zapTraceSpan = null);

        /// <summary>
        /// removes a member from a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScrapersScraperTargetIDMembersUserIDDeleteAsyncWithHttpInfo (string userID, string scraperTargetID, string zapTraceSpan = null);
        /// <summary>
        /// List all owners of a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwners</returns>
        System.Threading.Tasks.Task<ResourceOwners> ScrapersScraperTargetIDOwnersGetAsync (string scraperTargetID, string zapTraceSpan = null);

        /// <summary>
        /// List all owners of a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> ScrapersScraperTargetIDOwnersGetAsyncWithHttpInfo (string scraperTargetID, string zapTraceSpan = null);
        /// <summary>
        /// Add scraper target owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwner</returns>
        System.Threading.Tasks.Task<ResourceOwner> ScrapersScraperTargetIDOwnersPostAsync (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add scraper target owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> ScrapersScraperTargetIDOwnersPostAsyncWithHttpInfo (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes an owner from a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScrapersScraperTargetIDOwnersUserIDDeleteAsync (string userID, string scraperTargetID, string zapTraceSpan = null);

        /// <summary>
        /// removes an owner from a scraper target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScrapersScraperTargetIDOwnersUserIDDeleteAsyncWithHttpInfo (string userID, string scraperTargetID, string zapTraceSpan = null);
        /// <summary>
        /// List all task members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMembers</returns>
        System.Threading.Tasks.Task<ResourceMembers> TasksTaskIDMembersGetAsync (string taskID, string zapTraceSpan = null);

        /// <summary>
        /// List all task members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> TasksTaskIDMembersGetAsyncWithHttpInfo (string taskID, string zapTraceSpan = null);
        /// <summary>
        /// Add task member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMember</returns>
        System.Threading.Tasks.Task<ResourceMember> TasksTaskIDMembersPostAsync (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add task member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMember>> TasksTaskIDMembersPostAsyncWithHttpInfo (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes a member from an task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TasksTaskIDMembersUserIDDeleteAsync (string userID, string taskID, string zapTraceSpan = null);

        /// <summary>
        /// removes a member from an task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TasksTaskIDMembersUserIDDeleteAsyncWithHttpInfo (string userID, string taskID, string zapTraceSpan = null);
        /// <summary>
        /// List all task owners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwners</returns>
        System.Threading.Tasks.Task<ResourceOwners> TasksTaskIDOwnersGetAsync (string taskID, string zapTraceSpan = null);

        /// <summary>
        /// List all task owners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> TasksTaskIDOwnersGetAsyncWithHttpInfo (string taskID, string zapTraceSpan = null);
        /// <summary>
        /// Add task owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwner</returns>
        System.Threading.Tasks.Task<ResourceOwner> TasksTaskIDOwnersPostAsync (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add task owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> TasksTaskIDOwnersPostAsyncWithHttpInfo (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes an owner from an task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TasksTaskIDOwnersUserIDDeleteAsync (string userID, string taskID, string zapTraceSpan = null);

        /// <summary>
        /// removes an owner from an task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TasksTaskIDOwnersUserIDDeleteAsyncWithHttpInfo (string userID, string taskID, string zapTraceSpan = null);
        /// <summary>
        /// List all users with member privileges for a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMembers</returns>
        System.Threading.Tasks.Task<ResourceMembers> TelegrafsTelegrafIDMembersGetAsync (string telegrafID, string zapTraceSpan = null);

        /// <summary>
        /// List all users with member privileges for a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> TelegrafsTelegrafIDMembersGetAsyncWithHttpInfo (string telegrafID, string zapTraceSpan = null);
        /// <summary>
        /// Add telegraf config member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMember</returns>
        System.Threading.Tasks.Task<ResourceMember> TelegrafsTelegrafIDMembersPostAsync (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add telegraf config member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMember>> TelegrafsTelegrafIDMembersPostAsyncWithHttpInfo (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes a member from a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="telegrafID">ID of the telegraf</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TelegrafsTelegrafIDMembersUserIDDeleteAsync (string userID, string telegrafID, string zapTraceSpan = null);

        /// <summary>
        /// removes a member from a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="telegrafID">ID of the telegraf</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TelegrafsTelegrafIDMembersUserIDDeleteAsyncWithHttpInfo (string userID, string telegrafID, string zapTraceSpan = null);
        /// <summary>
        /// List all owners of a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwners</returns>
        System.Threading.Tasks.Task<ResourceOwners> TelegrafsTelegrafIDOwnersGetAsync (string telegrafID, string zapTraceSpan = null);

        /// <summary>
        /// List all owners of a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> TelegrafsTelegrafIDOwnersGetAsyncWithHttpInfo (string telegrafID, string zapTraceSpan = null);
        /// <summary>
        /// Add telegraf config owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwner</returns>
        System.Threading.Tasks.Task<ResourceOwner> TelegrafsTelegrafIDOwnersPostAsync (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);

        /// <summary>
        /// Add telegraf config owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> TelegrafsTelegrafIDOwnersPostAsyncWithHttpInfo (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null);
        /// <summary>
        /// removes an owner from a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TelegrafsTelegrafIDOwnersUserIDDeleteAsync (string userID, string telegrafID, string zapTraceSpan = null);

        /// <summary>
        /// removes an owner from a telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TelegrafsTelegrafIDOwnersUserIDDeleteAsyncWithHttpInfo (string userID, string telegrafID, string zapTraceSpan = null);
        /// <summary>
        /// List all users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Users</returns>
        System.Threading.Tasks.Task<Users> UsersGetAsync (string zapTraceSpan = null);

        /// <summary>
        /// List all users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        System.Threading.Tasks.Task<ApiResponse<Users>> UsersGetAsyncWithHttpInfo (string zapTraceSpan = null);
        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">user to create</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UsersPostAsync (User user);

        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">user to create</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UsersPostAsyncWithHttpInfo (User user);
        /// <summary>
        /// deletes a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersUserIDDeleteAsync (string userID, string zapTraceSpan = null);

        /// <summary>
        /// deletes a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersUserIDDeleteAsyncWithHttpInfo (string userID, string zapTraceSpan = null);
        /// <summary>
        /// Retrieve a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UsersUserIDGetAsync (string userID, string zapTraceSpan = null);

        /// <summary>
        /// Retrieve a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UsersUserIDGetAsyncWithHttpInfo (string userID, string zapTraceSpan = null);
        /// <summary>
        /// Retrieve operation logs for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>Task of OperationLogs</returns>
        System.Threading.Tasks.Task<OperationLogs> UsersUserIDLogsGetAsync (string userID, string zapTraceSpan = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Retrieve operation logs for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (OperationLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationLogs>> UsersUserIDLogsGetAsyncWithHttpInfo (string userID, string zapTraceSpan = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Update password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersUserIDPasswordPutAsync (string userID, PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null);

        /// <summary>
        /// Update password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersUserIDPasswordPutAsyncWithHttpInfo (string userID, PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null);
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to update</param>
        /// <param name="user">user update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UsersUserIDPatchAsync (string userID, User user, string zapTraceSpan = null);

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to update</param>
        /// <param name="user">user update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UsersUserIDPatchAsyncWithHttpInfo (string userID, User user, string zapTraceSpan = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersService : IUsersService
    {
        private InfluxDB.Client.Generated.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersService"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersService(String basePath)
        {
            this.Configuration = new InfluxDB.Client.Generated.Client.Configuration { BasePath = basePath };

            ExceptionFactory = InfluxDB.Client.Generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersService"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersService(InfluxDB.Client.Generated.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = InfluxDB.Client.Generated.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = InfluxDB.Client.Generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InfluxDB.Client.Generated.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InfluxDB.Client.Generated.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List all users with member privileges for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        public ResourceMembers BucketsBucketIDMembersGet (string bucketID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMembers> localVarResponse = BucketsBucketIDMembersGetWithHttpInfo(bucketID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all users with member privileges for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        public ApiResponse< ResourceMembers > BucketsBucketIDMembersGetWithHttpInfo (string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling UsersService->BucketsBucketIDMembersGet");

            var localVarPath = "/api/v2/buckets/{bucketID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMembers)));
        }

        /// <summary>
        /// List all users with member privileges for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMembers</returns>
        public async System.Threading.Tasks.Task<ResourceMembers> BucketsBucketIDMembersGetAsync (string bucketID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMembers> localVarResponse = await BucketsBucketIDMembersGetAsyncWithHttpInfo(bucketID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all users with member privileges for a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> BucketsBucketIDMembersGetAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling UsersService->BucketsBucketIDMembersGet");

            var localVarPath = "/api/v2/buckets/{bucketID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMembers)));
        }

        /// <summary>
        /// Add bucket member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        public ResourceMember BucketsBucketIDMembersPost (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMember> localVarResponse = BucketsBucketIDMembersPostWithHttpInfo(bucketID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add bucket member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        public ApiResponse< ResourceMember > BucketsBucketIDMembersPostWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling UsersService->BucketsBucketIDMembersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->BucketsBucketIDMembersPost");

            var localVarPath = "/api/v2/buckets/{bucketID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMember)));
        }

        /// <summary>
        /// Add bucket member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMember</returns>
        public async System.Threading.Tasks.Task<ResourceMember> BucketsBucketIDMembersPostAsync (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMember> localVarResponse = await BucketsBucketIDMembersPostAsyncWithHttpInfo(bucketID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add bucket member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceMember>> BucketsBucketIDMembersPostAsyncWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling UsersService->BucketsBucketIDMembersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->BucketsBucketIDMembersPost");

            var localVarPath = "/api/v2/buckets/{bucketID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMember)));
        }

        /// <summary>
        /// removes a member from an bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void BucketsBucketIDMembersUserIDDelete (string userID, string bucketID, string zapTraceSpan = null)
        {
             BucketsBucketIDMembersUserIDDeleteWithHttpInfo(userID, bucketID, zapTraceSpan);
        }

        /// <summary>
        /// removes a member from an bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BucketsBucketIDMembersUserIDDeleteWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->BucketsBucketIDMembersUserIDDelete");
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling UsersService->BucketsBucketIDMembersUserIDDelete");

            var localVarPath = "/api/v2/buckets/{bucketID}/members/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDMembersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// removes a member from an bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BucketsBucketIDMembersUserIDDeleteAsync (string userID, string bucketID, string zapTraceSpan = null)
        {
             await BucketsBucketIDMembersUserIDDeleteAsyncWithHttpInfo(userID, bucketID, zapTraceSpan);

        }

        /// <summary>
        /// removes a member from an bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BucketsBucketIDMembersUserIDDeleteAsyncWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->BucketsBucketIDMembersUserIDDelete");
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling UsersService->BucketsBucketIDMembersUserIDDelete");

            var localVarPath = "/api/v2/buckets/{bucketID}/members/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDMembersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all owners of a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        public ResourceOwners BucketsBucketIDOwnersGet (string bucketID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwners> localVarResponse = BucketsBucketIDOwnersGetWithHttpInfo(bucketID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all owners of a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        public ApiResponse< ResourceOwners > BucketsBucketIDOwnersGetWithHttpInfo (string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling UsersService->BucketsBucketIDOwnersGet");

            var localVarPath = "/api/v2/buckets/{bucketID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwners>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwners) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwners)));
        }

        /// <summary>
        /// List all owners of a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwners</returns>
        public async System.Threading.Tasks.Task<ResourceOwners> BucketsBucketIDOwnersGetAsync (string bucketID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwners> localVarResponse = await BucketsBucketIDOwnersGetAsyncWithHttpInfo(bucketID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all owners of a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> BucketsBucketIDOwnersGetAsyncWithHttpInfo (string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling UsersService->BucketsBucketIDOwnersGet");

            var localVarPath = "/api/v2/buckets/{bucketID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwners>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwners) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwners)));
        }

        /// <summary>
        /// Add bucket owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        public ResourceOwner BucketsBucketIDOwnersPost (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwner> localVarResponse = BucketsBucketIDOwnersPostWithHttpInfo(bucketID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add bucket owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        public ApiResponse< ResourceOwner > BucketsBucketIDOwnersPostWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling UsersService->BucketsBucketIDOwnersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->BucketsBucketIDOwnersPost");

            var localVarPath = "/api/v2/buckets/{bucketID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDOwnersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwner)));
        }

        /// <summary>
        /// Add bucket owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwner</returns>
        public async System.Threading.Tasks.Task<ResourceOwner> BucketsBucketIDOwnersPostAsync (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwner> localVarResponse = await BucketsBucketIDOwnersPostAsyncWithHttpInfo(bucketID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add bucket owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> BucketsBucketIDOwnersPostAsyncWithHttpInfo (string bucketID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling UsersService->BucketsBucketIDOwnersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->BucketsBucketIDOwnersPost");

            var localVarPath = "/api/v2/buckets/{bucketID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDOwnersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwner)));
        }

        /// <summary>
        /// removes an owner from a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void BucketsBucketIDOwnersUserIDDelete (string userID, string bucketID, string zapTraceSpan = null)
        {
             BucketsBucketIDOwnersUserIDDeleteWithHttpInfo(userID, bucketID, zapTraceSpan);
        }

        /// <summary>
        /// removes an owner from a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BucketsBucketIDOwnersUserIDDeleteWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->BucketsBucketIDOwnersUserIDDelete");
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling UsersService->BucketsBucketIDOwnersUserIDDelete");

            var localVarPath = "/api/v2/buckets/{bucketID}/owners/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDOwnersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// removes an owner from a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BucketsBucketIDOwnersUserIDDeleteAsync (string userID, string bucketID, string zapTraceSpan = null)
        {
             await BucketsBucketIDOwnersUserIDDeleteAsyncWithHttpInfo(userID, bucketID, zapTraceSpan);

        }

        /// <summary>
        /// removes an owner from a bucket 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="bucketID">ID of the bucket</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BucketsBucketIDOwnersUserIDDeleteAsyncWithHttpInfo (string userID, string bucketID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->BucketsBucketIDOwnersUserIDDelete");
            // verify the required parameter 'bucketID' is set
            if (bucketID == null)
                throw new ApiException(400, "Missing required parameter 'bucketID' when calling UsersService->BucketsBucketIDOwnersUserIDDelete");

            var localVarPath = "/api/v2/buckets/{bucketID}/owners/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (bucketID != null) localVarPathParams.Add("bucketID", this.Configuration.ApiClient.ParameterToString(bucketID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BucketsBucketIDOwnersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all dashboard members 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        public ResourceMembers DashboardsDashboardIDMembersGet (string dashboardID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMembers> localVarResponse = DashboardsDashboardIDMembersGetWithHttpInfo(dashboardID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all dashboard members 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        public ApiResponse< ResourceMembers > DashboardsDashboardIDMembersGetWithHttpInfo (string dashboardID, string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new ApiException(400, "Missing required parameter 'dashboardID' when calling UsersService->DashboardsDashboardIDMembersGet");

            var localVarPath = "/api/v2/dashboards/{dashboardID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardID != null) localVarPathParams.Add("dashboardID", this.Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIDMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMembers)));
        }

        /// <summary>
        /// List all dashboard members 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMembers</returns>
        public async System.Threading.Tasks.Task<ResourceMembers> DashboardsDashboardIDMembersGetAsync (string dashboardID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMembers> localVarResponse = await DashboardsDashboardIDMembersGetAsyncWithHttpInfo(dashboardID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all dashboard members 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> DashboardsDashboardIDMembersGetAsyncWithHttpInfo (string dashboardID, string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new ApiException(400, "Missing required parameter 'dashboardID' when calling UsersService->DashboardsDashboardIDMembersGet");

            var localVarPath = "/api/v2/dashboards/{dashboardID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardID != null) localVarPathParams.Add("dashboardID", this.Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIDMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMembers)));
        }

        /// <summary>
        /// Add dashboard member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        public ResourceMember DashboardsDashboardIDMembersPost (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMember> localVarResponse = DashboardsDashboardIDMembersPostWithHttpInfo(dashboardID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add dashboard member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        public ApiResponse< ResourceMember > DashboardsDashboardIDMembersPostWithHttpInfo (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new ApiException(400, "Missing required parameter 'dashboardID' when calling UsersService->DashboardsDashboardIDMembersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->DashboardsDashboardIDMembersPost");

            var localVarPath = "/api/v2/dashboards/{dashboardID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardID != null) localVarPathParams.Add("dashboardID", this.Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIDMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMember)));
        }

        /// <summary>
        /// Add dashboard member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMember</returns>
        public async System.Threading.Tasks.Task<ResourceMember> DashboardsDashboardIDMembersPostAsync (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMember> localVarResponse = await DashboardsDashboardIDMembersPostAsyncWithHttpInfo(dashboardID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add dashboard member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceMember>> DashboardsDashboardIDMembersPostAsyncWithHttpInfo (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new ApiException(400, "Missing required parameter 'dashboardID' when calling UsersService->DashboardsDashboardIDMembersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->DashboardsDashboardIDMembersPost");

            var localVarPath = "/api/v2/dashboards/{dashboardID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardID != null) localVarPathParams.Add("dashboardID", this.Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIDMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMember)));
        }

        /// <summary>
        /// removes a member from an dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DashboardsDashboardIDMembersUserIDDelete (string userID, string dashboardID, string zapTraceSpan = null)
        {
             DashboardsDashboardIDMembersUserIDDeleteWithHttpInfo(userID, dashboardID, zapTraceSpan);
        }

        /// <summary>
        /// removes a member from an dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DashboardsDashboardIDMembersUserIDDeleteWithHttpInfo (string userID, string dashboardID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->DashboardsDashboardIDMembersUserIDDelete");
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new ApiException(400, "Missing required parameter 'dashboardID' when calling UsersService->DashboardsDashboardIDMembersUserIDDelete");

            var localVarPath = "/api/v2/dashboards/{dashboardID}/members/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (dashboardID != null) localVarPathParams.Add("dashboardID", this.Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIDMembersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// removes a member from an dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DashboardsDashboardIDMembersUserIDDeleteAsync (string userID, string dashboardID, string zapTraceSpan = null)
        {
             await DashboardsDashboardIDMembersUserIDDeleteAsyncWithHttpInfo(userID, dashboardID, zapTraceSpan);

        }

        /// <summary>
        /// removes a member from an dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsDashboardIDMembersUserIDDeleteAsyncWithHttpInfo (string userID, string dashboardID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->DashboardsDashboardIDMembersUserIDDelete");
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new ApiException(400, "Missing required parameter 'dashboardID' when calling UsersService->DashboardsDashboardIDMembersUserIDDelete");

            var localVarPath = "/api/v2/dashboards/{dashboardID}/members/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (dashboardID != null) localVarPathParams.Add("dashboardID", this.Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIDMembersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all dashboard owners 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        public ResourceOwners DashboardsDashboardIDOwnersGet (string dashboardID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwners> localVarResponse = DashboardsDashboardIDOwnersGetWithHttpInfo(dashboardID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all dashboard owners 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        public ApiResponse< ResourceOwners > DashboardsDashboardIDOwnersGetWithHttpInfo (string dashboardID, string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new ApiException(400, "Missing required parameter 'dashboardID' when calling UsersService->DashboardsDashboardIDOwnersGet");

            var localVarPath = "/api/v2/dashboards/{dashboardID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardID != null) localVarPathParams.Add("dashboardID", this.Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIDOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwners>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwners) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwners)));
        }

        /// <summary>
        /// List all dashboard owners 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwners</returns>
        public async System.Threading.Tasks.Task<ResourceOwners> DashboardsDashboardIDOwnersGetAsync (string dashboardID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwners> localVarResponse = await DashboardsDashboardIDOwnersGetAsyncWithHttpInfo(dashboardID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all dashboard owners 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> DashboardsDashboardIDOwnersGetAsyncWithHttpInfo (string dashboardID, string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new ApiException(400, "Missing required parameter 'dashboardID' when calling UsersService->DashboardsDashboardIDOwnersGet");

            var localVarPath = "/api/v2/dashboards/{dashboardID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardID != null) localVarPathParams.Add("dashboardID", this.Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIDOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwners>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwners) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwners)));
        }

        /// <summary>
        /// Add dashboard owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        public ResourceOwner DashboardsDashboardIDOwnersPost (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwner> localVarResponse = DashboardsDashboardIDOwnersPostWithHttpInfo(dashboardID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add dashboard owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        public ApiResponse< ResourceOwner > DashboardsDashboardIDOwnersPostWithHttpInfo (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new ApiException(400, "Missing required parameter 'dashboardID' when calling UsersService->DashboardsDashboardIDOwnersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->DashboardsDashboardIDOwnersPost");

            var localVarPath = "/api/v2/dashboards/{dashboardID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardID != null) localVarPathParams.Add("dashboardID", this.Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIDOwnersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwner)));
        }

        /// <summary>
        /// Add dashboard owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwner</returns>
        public async System.Threading.Tasks.Task<ResourceOwner> DashboardsDashboardIDOwnersPostAsync (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwner> localVarResponse = await DashboardsDashboardIDOwnersPostAsyncWithHttpInfo(dashboardID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add dashboard owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> DashboardsDashboardIDOwnersPostAsyncWithHttpInfo (string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new ApiException(400, "Missing required parameter 'dashboardID' when calling UsersService->DashboardsDashboardIDOwnersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->DashboardsDashboardIDOwnersPost");

            var localVarPath = "/api/v2/dashboards/{dashboardID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dashboardID != null) localVarPathParams.Add("dashboardID", this.Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIDOwnersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwner)));
        }

        /// <summary>
        /// removes an owner from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DashboardsDashboardIDOwnersUserIDDelete (string userID, string dashboardID, string zapTraceSpan = null)
        {
             DashboardsDashboardIDOwnersUserIDDeleteWithHttpInfo(userID, dashboardID, zapTraceSpan);
        }

        /// <summary>
        /// removes an owner from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DashboardsDashboardIDOwnersUserIDDeleteWithHttpInfo (string userID, string dashboardID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->DashboardsDashboardIDOwnersUserIDDelete");
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new ApiException(400, "Missing required parameter 'dashboardID' when calling UsersService->DashboardsDashboardIDOwnersUserIDDelete");

            var localVarPath = "/api/v2/dashboards/{dashboardID}/owners/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (dashboardID != null) localVarPathParams.Add("dashboardID", this.Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIDOwnersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// removes an owner from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DashboardsDashboardIDOwnersUserIDDeleteAsync (string userID, string dashboardID, string zapTraceSpan = null)
        {
             await DashboardsDashboardIDOwnersUserIDDeleteAsyncWithHttpInfo(userID, dashboardID, zapTraceSpan);

        }

        /// <summary>
        /// removes an owner from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="dashboardID">ID of the dashboard</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsDashboardIDOwnersUserIDDeleteAsyncWithHttpInfo (string userID, string dashboardID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->DashboardsDashboardIDOwnersUserIDDelete");
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new ApiException(400, "Missing required parameter 'dashboardID' when calling UsersService->DashboardsDashboardIDOwnersUserIDDelete");

            var localVarPath = "/api/v2/dashboards/{dashboardID}/owners/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (dashboardID != null) localVarPathParams.Add("dashboardID", this.Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDashboardIDOwnersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns currently authenticated user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>User</returns>
        public User MeGet (string zapTraceSpan = null)
        {
             ApiResponse<User> localVarResponse = MeGetWithHttpInfo(zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns currently authenticated user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > MeGetWithHttpInfo (string zapTraceSpan = null)
        {

            var localVarPath = "/api/v2/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Returns currently authenticated user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> MeGetAsync (string zapTraceSpan = null)
        {
             ApiResponse<User> localVarResponse = await MeGetAsyncWithHttpInfo(zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns currently authenticated user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> MeGetAsyncWithHttpInfo (string zapTraceSpan = null)
        {

            var localVarPath = "/api/v2/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Update password 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns></returns>
        public void MePasswordPut (PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null)
        {
             MePasswordPutWithHttpInfo(passwordResetBody, zapTraceSpan, authorization);
        }

        /// <summary>
        /// Update password 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MePasswordPutWithHttpInfo (PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null)
        {
            // verify the required parameter 'passwordResetBody' is set
            if (passwordResetBody == null)
                throw new ApiException(400, "Missing required parameter 'passwordResetBody' when calling UsersService->MePasswordPut");

            var localVarPath = "/api/v2/me/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (passwordResetBody != null && passwordResetBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(passwordResetBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = passwordResetBody; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MePasswordPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update password 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MePasswordPutAsync (PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null)
        {
             await MePasswordPutAsyncWithHttpInfo(passwordResetBody, zapTraceSpan, authorization);

        }

        /// <summary>
        /// Update password 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MePasswordPutAsyncWithHttpInfo (PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null)
        {
            // verify the required parameter 'passwordResetBody' is set
            if (passwordResetBody == null)
                throw new ApiException(400, "Missing required parameter 'passwordResetBody' when calling UsersService->MePasswordPut");

            var localVarPath = "/api/v2/me/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (passwordResetBody != null && passwordResetBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(passwordResetBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = passwordResetBody; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MePasswordPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all members of an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        public ResourceMembers OrgsOrgIDMembersGet (string orgID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMembers> localVarResponse = OrgsOrgIDMembersGetWithHttpInfo(orgID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all members of an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        public ApiResponse< ResourceMembers > OrgsOrgIDMembersGetWithHttpInfo (string orgID, string zapTraceSpan = null)
        {
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new ApiException(400, "Missing required parameter 'orgID' when calling UsersService->OrgsOrgIDMembersGet");

            var localVarPath = "/api/v2/orgs/{orgID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgID != null) localVarPathParams.Add("orgID", this.Configuration.ApiClient.ParameterToString(orgID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgsOrgIDMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMembers)));
        }

        /// <summary>
        /// List all members of an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMembers</returns>
        public async System.Threading.Tasks.Task<ResourceMembers> OrgsOrgIDMembersGetAsync (string orgID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMembers> localVarResponse = await OrgsOrgIDMembersGetAsyncWithHttpInfo(orgID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all members of an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> OrgsOrgIDMembersGetAsyncWithHttpInfo (string orgID, string zapTraceSpan = null)
        {
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new ApiException(400, "Missing required parameter 'orgID' when calling UsersService->OrgsOrgIDMembersGet");

            var localVarPath = "/api/v2/orgs/{orgID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgID != null) localVarPathParams.Add("orgID", this.Configuration.ApiClient.ParameterToString(orgID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgsOrgIDMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMembers)));
        }

        /// <summary>
        /// Add organization member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        public ResourceMember OrgsOrgIDMembersPost (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMember> localVarResponse = OrgsOrgIDMembersPostWithHttpInfo(orgID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add organization member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        public ApiResponse< ResourceMember > OrgsOrgIDMembersPostWithHttpInfo (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new ApiException(400, "Missing required parameter 'orgID' when calling UsersService->OrgsOrgIDMembersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->OrgsOrgIDMembersPost");

            var localVarPath = "/api/v2/orgs/{orgID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgID != null) localVarPathParams.Add("orgID", this.Configuration.ApiClient.ParameterToString(orgID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgsOrgIDMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMember)));
        }

        /// <summary>
        /// Add organization member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMember</returns>
        public async System.Threading.Tasks.Task<ResourceMember> OrgsOrgIDMembersPostAsync (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMember> localVarResponse = await OrgsOrgIDMembersPostAsyncWithHttpInfo(orgID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add organization member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceMember>> OrgsOrgIDMembersPostAsyncWithHttpInfo (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new ApiException(400, "Missing required parameter 'orgID' when calling UsersService->OrgsOrgIDMembersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->OrgsOrgIDMembersPost");

            var localVarPath = "/api/v2/orgs/{orgID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgID != null) localVarPathParams.Add("orgID", this.Configuration.ApiClient.ParameterToString(orgID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgsOrgIDMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMember)));
        }

        /// <summary>
        /// removes a member from an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void OrgsOrgIDMembersUserIDDelete (string userID, string orgID, string zapTraceSpan = null)
        {
             OrgsOrgIDMembersUserIDDeleteWithHttpInfo(userID, orgID, zapTraceSpan);
        }

        /// <summary>
        /// removes a member from an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrgsOrgIDMembersUserIDDeleteWithHttpInfo (string userID, string orgID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->OrgsOrgIDMembersUserIDDelete");
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new ApiException(400, "Missing required parameter 'orgID' when calling UsersService->OrgsOrgIDMembersUserIDDelete");

            var localVarPath = "/api/v2/orgs/{orgID}/members/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (orgID != null) localVarPathParams.Add("orgID", this.Configuration.ApiClient.ParameterToString(orgID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgsOrgIDMembersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// removes a member from an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrgsOrgIDMembersUserIDDeleteAsync (string userID, string orgID, string zapTraceSpan = null)
        {
             await OrgsOrgIDMembersUserIDDeleteAsyncWithHttpInfo(userID, orgID, zapTraceSpan);

        }

        /// <summary>
        /// removes a member from an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrgsOrgIDMembersUserIDDeleteAsyncWithHttpInfo (string userID, string orgID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->OrgsOrgIDMembersUserIDDelete");
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new ApiException(400, "Missing required parameter 'orgID' when calling UsersService->OrgsOrgIDMembersUserIDDelete");

            var localVarPath = "/api/v2/orgs/{orgID}/members/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (orgID != null) localVarPathParams.Add("orgID", this.Configuration.ApiClient.ParameterToString(orgID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgsOrgIDMembersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all owners of an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        public ResourceOwners OrgsOrgIDOwnersGet (string orgID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwners> localVarResponse = OrgsOrgIDOwnersGetWithHttpInfo(orgID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all owners of an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        public ApiResponse< ResourceOwners > OrgsOrgIDOwnersGetWithHttpInfo (string orgID, string zapTraceSpan = null)
        {
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new ApiException(400, "Missing required parameter 'orgID' when calling UsersService->OrgsOrgIDOwnersGet");

            var localVarPath = "/api/v2/orgs/{orgID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgID != null) localVarPathParams.Add("orgID", this.Configuration.ApiClient.ParameterToString(orgID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgsOrgIDOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwners>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwners) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwners)));
        }

        /// <summary>
        /// List all owners of an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwners</returns>
        public async System.Threading.Tasks.Task<ResourceOwners> OrgsOrgIDOwnersGetAsync (string orgID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwners> localVarResponse = await OrgsOrgIDOwnersGetAsyncWithHttpInfo(orgID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all owners of an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> OrgsOrgIDOwnersGetAsyncWithHttpInfo (string orgID, string zapTraceSpan = null)
        {
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new ApiException(400, "Missing required parameter 'orgID' when calling UsersService->OrgsOrgIDOwnersGet");

            var localVarPath = "/api/v2/orgs/{orgID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgID != null) localVarPathParams.Add("orgID", this.Configuration.ApiClient.ParameterToString(orgID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgsOrgIDOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwners>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwners) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwners)));
        }

        /// <summary>
        /// Add organization owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        public ResourceOwner OrgsOrgIDOwnersPost (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwner> localVarResponse = OrgsOrgIDOwnersPostWithHttpInfo(orgID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add organization owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        public ApiResponse< ResourceOwner > OrgsOrgIDOwnersPostWithHttpInfo (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new ApiException(400, "Missing required parameter 'orgID' when calling UsersService->OrgsOrgIDOwnersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->OrgsOrgIDOwnersPost");

            var localVarPath = "/api/v2/orgs/{orgID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgID != null) localVarPathParams.Add("orgID", this.Configuration.ApiClient.ParameterToString(orgID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgsOrgIDOwnersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwner)));
        }

        /// <summary>
        /// Add organization owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwner</returns>
        public async System.Threading.Tasks.Task<ResourceOwner> OrgsOrgIDOwnersPostAsync (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwner> localVarResponse = await OrgsOrgIDOwnersPostAsyncWithHttpInfo(orgID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add organization owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> OrgsOrgIDOwnersPostAsyncWithHttpInfo (string orgID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new ApiException(400, "Missing required parameter 'orgID' when calling UsersService->OrgsOrgIDOwnersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->OrgsOrgIDOwnersPost");

            var localVarPath = "/api/v2/orgs/{orgID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgID != null) localVarPathParams.Add("orgID", this.Configuration.ApiClient.ParameterToString(orgID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgsOrgIDOwnersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwner)));
        }

        /// <summary>
        /// removes an owner from an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void OrgsOrgIDOwnersUserIDDelete (string userID, string orgID, string zapTraceSpan = null)
        {
             OrgsOrgIDOwnersUserIDDeleteWithHttpInfo(userID, orgID, zapTraceSpan);
        }

        /// <summary>
        /// removes an owner from an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrgsOrgIDOwnersUserIDDeleteWithHttpInfo (string userID, string orgID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->OrgsOrgIDOwnersUserIDDelete");
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new ApiException(400, "Missing required parameter 'orgID' when calling UsersService->OrgsOrgIDOwnersUserIDDelete");

            var localVarPath = "/api/v2/orgs/{orgID}/owners/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (orgID != null) localVarPathParams.Add("orgID", this.Configuration.ApiClient.ParameterToString(orgID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgsOrgIDOwnersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// removes an owner from an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrgsOrgIDOwnersUserIDDeleteAsync (string userID, string orgID, string zapTraceSpan = null)
        {
             await OrgsOrgIDOwnersUserIDDeleteAsyncWithHttpInfo(userID, orgID, zapTraceSpan);

        }

        /// <summary>
        /// removes an owner from an organization 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="orgID">ID of the organization</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrgsOrgIDOwnersUserIDDeleteAsyncWithHttpInfo (string userID, string orgID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->OrgsOrgIDOwnersUserIDDelete");
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new ApiException(400, "Missing required parameter 'orgID' when calling UsersService->OrgsOrgIDOwnersUserIDDelete");

            var localVarPath = "/api/v2/orgs/{orgID}/owners/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (orgID != null) localVarPathParams.Add("orgID", this.Configuration.ApiClient.ParameterToString(orgID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrgsOrgIDOwnersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all users with member privileges for a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        public ResourceMembers ScrapersScraperTargetIDMembersGet (string scraperTargetID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMembers> localVarResponse = ScrapersScraperTargetIDMembersGetWithHttpInfo(scraperTargetID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all users with member privileges for a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        public ApiResponse< ResourceMembers > ScrapersScraperTargetIDMembersGetWithHttpInfo (string scraperTargetID, string zapTraceSpan = null)
        {
            // verify the required parameter 'scraperTargetID' is set
            if (scraperTargetID == null)
                throw new ApiException(400, "Missing required parameter 'scraperTargetID' when calling UsersService->ScrapersScraperTargetIDMembersGet");

            var localVarPath = "/api/v2/scrapers/{scraperTargetID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scraperTargetID != null) localVarPathParams.Add("scraperTargetID", this.Configuration.ApiClient.ParameterToString(scraperTargetID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScrapersScraperTargetIDMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMembers)));
        }

        /// <summary>
        /// List all users with member privileges for a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMembers</returns>
        public async System.Threading.Tasks.Task<ResourceMembers> ScrapersScraperTargetIDMembersGetAsync (string scraperTargetID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMembers> localVarResponse = await ScrapersScraperTargetIDMembersGetAsyncWithHttpInfo(scraperTargetID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all users with member privileges for a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> ScrapersScraperTargetIDMembersGetAsyncWithHttpInfo (string scraperTargetID, string zapTraceSpan = null)
        {
            // verify the required parameter 'scraperTargetID' is set
            if (scraperTargetID == null)
                throw new ApiException(400, "Missing required parameter 'scraperTargetID' when calling UsersService->ScrapersScraperTargetIDMembersGet");

            var localVarPath = "/api/v2/scrapers/{scraperTargetID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scraperTargetID != null) localVarPathParams.Add("scraperTargetID", this.Configuration.ApiClient.ParameterToString(scraperTargetID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScrapersScraperTargetIDMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMembers)));
        }

        /// <summary>
        /// Add scraper target member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        public ResourceMember ScrapersScraperTargetIDMembersPost (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMember> localVarResponse = ScrapersScraperTargetIDMembersPostWithHttpInfo(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add scraper target member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        public ApiResponse< ResourceMember > ScrapersScraperTargetIDMembersPostWithHttpInfo (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'scraperTargetID' is set
            if (scraperTargetID == null)
                throw new ApiException(400, "Missing required parameter 'scraperTargetID' when calling UsersService->ScrapersScraperTargetIDMembersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->ScrapersScraperTargetIDMembersPost");

            var localVarPath = "/api/v2/scrapers/{scraperTargetID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scraperTargetID != null) localVarPathParams.Add("scraperTargetID", this.Configuration.ApiClient.ParameterToString(scraperTargetID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScrapersScraperTargetIDMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMember)));
        }

        /// <summary>
        /// Add scraper target member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMember</returns>
        public async System.Threading.Tasks.Task<ResourceMember> ScrapersScraperTargetIDMembersPostAsync (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMember> localVarResponse = await ScrapersScraperTargetIDMembersPostAsyncWithHttpInfo(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add scraper target member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceMember>> ScrapersScraperTargetIDMembersPostAsyncWithHttpInfo (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'scraperTargetID' is set
            if (scraperTargetID == null)
                throw new ApiException(400, "Missing required parameter 'scraperTargetID' when calling UsersService->ScrapersScraperTargetIDMembersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->ScrapersScraperTargetIDMembersPost");

            var localVarPath = "/api/v2/scrapers/{scraperTargetID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scraperTargetID != null) localVarPathParams.Add("scraperTargetID", this.Configuration.ApiClient.ParameterToString(scraperTargetID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScrapersScraperTargetIDMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMember)));
        }

        /// <summary>
        /// removes a member from a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void ScrapersScraperTargetIDMembersUserIDDelete (string userID, string scraperTargetID, string zapTraceSpan = null)
        {
             ScrapersScraperTargetIDMembersUserIDDeleteWithHttpInfo(userID, scraperTargetID, zapTraceSpan);
        }

        /// <summary>
        /// removes a member from a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ScrapersScraperTargetIDMembersUserIDDeleteWithHttpInfo (string userID, string scraperTargetID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->ScrapersScraperTargetIDMembersUserIDDelete");
            // verify the required parameter 'scraperTargetID' is set
            if (scraperTargetID == null)
                throw new ApiException(400, "Missing required parameter 'scraperTargetID' when calling UsersService->ScrapersScraperTargetIDMembersUserIDDelete");

            var localVarPath = "/api/v2/scrapers/{scraperTargetID}/members/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (scraperTargetID != null) localVarPathParams.Add("scraperTargetID", this.Configuration.ApiClient.ParameterToString(scraperTargetID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScrapersScraperTargetIDMembersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// removes a member from a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScrapersScraperTargetIDMembersUserIDDeleteAsync (string userID, string scraperTargetID, string zapTraceSpan = null)
        {
             await ScrapersScraperTargetIDMembersUserIDDeleteAsyncWithHttpInfo(userID, scraperTargetID, zapTraceSpan);

        }

        /// <summary>
        /// removes a member from a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ScrapersScraperTargetIDMembersUserIDDeleteAsyncWithHttpInfo (string userID, string scraperTargetID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->ScrapersScraperTargetIDMembersUserIDDelete");
            // verify the required parameter 'scraperTargetID' is set
            if (scraperTargetID == null)
                throw new ApiException(400, "Missing required parameter 'scraperTargetID' when calling UsersService->ScrapersScraperTargetIDMembersUserIDDelete");

            var localVarPath = "/api/v2/scrapers/{scraperTargetID}/members/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (scraperTargetID != null) localVarPathParams.Add("scraperTargetID", this.Configuration.ApiClient.ParameterToString(scraperTargetID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScrapersScraperTargetIDMembersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all owners of a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        public ResourceOwners ScrapersScraperTargetIDOwnersGet (string scraperTargetID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwners> localVarResponse = ScrapersScraperTargetIDOwnersGetWithHttpInfo(scraperTargetID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all owners of a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        public ApiResponse< ResourceOwners > ScrapersScraperTargetIDOwnersGetWithHttpInfo (string scraperTargetID, string zapTraceSpan = null)
        {
            // verify the required parameter 'scraperTargetID' is set
            if (scraperTargetID == null)
                throw new ApiException(400, "Missing required parameter 'scraperTargetID' when calling UsersService->ScrapersScraperTargetIDOwnersGet");

            var localVarPath = "/api/v2/scrapers/{scraperTargetID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scraperTargetID != null) localVarPathParams.Add("scraperTargetID", this.Configuration.ApiClient.ParameterToString(scraperTargetID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScrapersScraperTargetIDOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwners>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwners) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwners)));
        }

        /// <summary>
        /// List all owners of a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwners</returns>
        public async System.Threading.Tasks.Task<ResourceOwners> ScrapersScraperTargetIDOwnersGetAsync (string scraperTargetID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwners> localVarResponse = await ScrapersScraperTargetIDOwnersGetAsyncWithHttpInfo(scraperTargetID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all owners of a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> ScrapersScraperTargetIDOwnersGetAsyncWithHttpInfo (string scraperTargetID, string zapTraceSpan = null)
        {
            // verify the required parameter 'scraperTargetID' is set
            if (scraperTargetID == null)
                throw new ApiException(400, "Missing required parameter 'scraperTargetID' when calling UsersService->ScrapersScraperTargetIDOwnersGet");

            var localVarPath = "/api/v2/scrapers/{scraperTargetID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scraperTargetID != null) localVarPathParams.Add("scraperTargetID", this.Configuration.ApiClient.ParameterToString(scraperTargetID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScrapersScraperTargetIDOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwners>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwners) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwners)));
        }

        /// <summary>
        /// Add scraper target owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        public ResourceOwner ScrapersScraperTargetIDOwnersPost (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwner> localVarResponse = ScrapersScraperTargetIDOwnersPostWithHttpInfo(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add scraper target owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        public ApiResponse< ResourceOwner > ScrapersScraperTargetIDOwnersPostWithHttpInfo (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'scraperTargetID' is set
            if (scraperTargetID == null)
                throw new ApiException(400, "Missing required parameter 'scraperTargetID' when calling UsersService->ScrapersScraperTargetIDOwnersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->ScrapersScraperTargetIDOwnersPost");

            var localVarPath = "/api/v2/scrapers/{scraperTargetID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scraperTargetID != null) localVarPathParams.Add("scraperTargetID", this.Configuration.ApiClient.ParameterToString(scraperTargetID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScrapersScraperTargetIDOwnersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwner)));
        }

        /// <summary>
        /// Add scraper target owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwner</returns>
        public async System.Threading.Tasks.Task<ResourceOwner> ScrapersScraperTargetIDOwnersPostAsync (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwner> localVarResponse = await ScrapersScraperTargetIDOwnersPostAsyncWithHttpInfo(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add scraper target owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> ScrapersScraperTargetIDOwnersPostAsyncWithHttpInfo (string scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'scraperTargetID' is set
            if (scraperTargetID == null)
                throw new ApiException(400, "Missing required parameter 'scraperTargetID' when calling UsersService->ScrapersScraperTargetIDOwnersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->ScrapersScraperTargetIDOwnersPost");

            var localVarPath = "/api/v2/scrapers/{scraperTargetID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scraperTargetID != null) localVarPathParams.Add("scraperTargetID", this.Configuration.ApiClient.ParameterToString(scraperTargetID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScrapersScraperTargetIDOwnersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwner)));
        }

        /// <summary>
        /// removes an owner from a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void ScrapersScraperTargetIDOwnersUserIDDelete (string userID, string scraperTargetID, string zapTraceSpan = null)
        {
             ScrapersScraperTargetIDOwnersUserIDDeleteWithHttpInfo(userID, scraperTargetID, zapTraceSpan);
        }

        /// <summary>
        /// removes an owner from a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ScrapersScraperTargetIDOwnersUserIDDeleteWithHttpInfo (string userID, string scraperTargetID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->ScrapersScraperTargetIDOwnersUserIDDelete");
            // verify the required parameter 'scraperTargetID' is set
            if (scraperTargetID == null)
                throw new ApiException(400, "Missing required parameter 'scraperTargetID' when calling UsersService->ScrapersScraperTargetIDOwnersUserIDDelete");

            var localVarPath = "/api/v2/scrapers/{scraperTargetID}/owners/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (scraperTargetID != null) localVarPathParams.Add("scraperTargetID", this.Configuration.ApiClient.ParameterToString(scraperTargetID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScrapersScraperTargetIDOwnersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// removes an owner from a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScrapersScraperTargetIDOwnersUserIDDeleteAsync (string userID, string scraperTargetID, string zapTraceSpan = null)
        {
             await ScrapersScraperTargetIDOwnersUserIDDeleteAsyncWithHttpInfo(userID, scraperTargetID, zapTraceSpan);

        }

        /// <summary>
        /// removes an owner from a scraper target 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="scraperTargetID">ID of the scraper target</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ScrapersScraperTargetIDOwnersUserIDDeleteAsyncWithHttpInfo (string userID, string scraperTargetID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->ScrapersScraperTargetIDOwnersUserIDDelete");
            // verify the required parameter 'scraperTargetID' is set
            if (scraperTargetID == null)
                throw new ApiException(400, "Missing required parameter 'scraperTargetID' when calling UsersService->ScrapersScraperTargetIDOwnersUserIDDelete");

            var localVarPath = "/api/v2/scrapers/{scraperTargetID}/owners/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (scraperTargetID != null) localVarPathParams.Add("scraperTargetID", this.Configuration.ApiClient.ParameterToString(scraperTargetID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScrapersScraperTargetIDOwnersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all task members 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        public ResourceMembers TasksTaskIDMembersGet (string taskID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMembers> localVarResponse = TasksTaskIDMembersGetWithHttpInfo(taskID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all task members 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        public ApiResponse< ResourceMembers > TasksTaskIDMembersGetWithHttpInfo (string taskID, string zapTraceSpan = null)
        {
            // verify the required parameter 'taskID' is set
            if (taskID == null)
                throw new ApiException(400, "Missing required parameter 'taskID' when calling UsersService->TasksTaskIDMembersGet");

            var localVarPath = "/api/v2/tasks/{taskID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskID != null) localVarPathParams.Add("taskID", this.Configuration.ApiClient.ParameterToString(taskID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksTaskIDMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMembers)));
        }

        /// <summary>
        /// List all task members 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMembers</returns>
        public async System.Threading.Tasks.Task<ResourceMembers> TasksTaskIDMembersGetAsync (string taskID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMembers> localVarResponse = await TasksTaskIDMembersGetAsyncWithHttpInfo(taskID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all task members 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> TasksTaskIDMembersGetAsyncWithHttpInfo (string taskID, string zapTraceSpan = null)
        {
            // verify the required parameter 'taskID' is set
            if (taskID == null)
                throw new ApiException(400, "Missing required parameter 'taskID' when calling UsersService->TasksTaskIDMembersGet");

            var localVarPath = "/api/v2/tasks/{taskID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskID != null) localVarPathParams.Add("taskID", this.Configuration.ApiClient.ParameterToString(taskID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksTaskIDMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMembers)));
        }

        /// <summary>
        /// Add task member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        public ResourceMember TasksTaskIDMembersPost (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMember> localVarResponse = TasksTaskIDMembersPostWithHttpInfo(taskID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add task member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        public ApiResponse< ResourceMember > TasksTaskIDMembersPostWithHttpInfo (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'taskID' is set
            if (taskID == null)
                throw new ApiException(400, "Missing required parameter 'taskID' when calling UsersService->TasksTaskIDMembersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->TasksTaskIDMembersPost");

            var localVarPath = "/api/v2/tasks/{taskID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskID != null) localVarPathParams.Add("taskID", this.Configuration.ApiClient.ParameterToString(taskID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksTaskIDMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMember)));
        }

        /// <summary>
        /// Add task member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMember</returns>
        public async System.Threading.Tasks.Task<ResourceMember> TasksTaskIDMembersPostAsync (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMember> localVarResponse = await TasksTaskIDMembersPostAsyncWithHttpInfo(taskID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add task member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceMember>> TasksTaskIDMembersPostAsyncWithHttpInfo (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'taskID' is set
            if (taskID == null)
                throw new ApiException(400, "Missing required parameter 'taskID' when calling UsersService->TasksTaskIDMembersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->TasksTaskIDMembersPost");

            var localVarPath = "/api/v2/tasks/{taskID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskID != null) localVarPathParams.Add("taskID", this.Configuration.ApiClient.ParameterToString(taskID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksTaskIDMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMember)));
        }

        /// <summary>
        /// removes a member from an task 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void TasksTaskIDMembersUserIDDelete (string userID, string taskID, string zapTraceSpan = null)
        {
             TasksTaskIDMembersUserIDDeleteWithHttpInfo(userID, taskID, zapTraceSpan);
        }

        /// <summary>
        /// removes a member from an task 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TasksTaskIDMembersUserIDDeleteWithHttpInfo (string userID, string taskID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->TasksTaskIDMembersUserIDDelete");
            // verify the required parameter 'taskID' is set
            if (taskID == null)
                throw new ApiException(400, "Missing required parameter 'taskID' when calling UsersService->TasksTaskIDMembersUserIDDelete");

            var localVarPath = "/api/v2/tasks/{taskID}/members/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (taskID != null) localVarPathParams.Add("taskID", this.Configuration.ApiClient.ParameterToString(taskID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksTaskIDMembersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// removes a member from an task 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TasksTaskIDMembersUserIDDeleteAsync (string userID, string taskID, string zapTraceSpan = null)
        {
             await TasksTaskIDMembersUserIDDeleteAsyncWithHttpInfo(userID, taskID, zapTraceSpan);

        }

        /// <summary>
        /// removes a member from an task 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TasksTaskIDMembersUserIDDeleteAsyncWithHttpInfo (string userID, string taskID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->TasksTaskIDMembersUserIDDelete");
            // verify the required parameter 'taskID' is set
            if (taskID == null)
                throw new ApiException(400, "Missing required parameter 'taskID' when calling UsersService->TasksTaskIDMembersUserIDDelete");

            var localVarPath = "/api/v2/tasks/{taskID}/members/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (taskID != null) localVarPathParams.Add("taskID", this.Configuration.ApiClient.ParameterToString(taskID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksTaskIDMembersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all task owners 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        public ResourceOwners TasksTaskIDOwnersGet (string taskID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwners> localVarResponse = TasksTaskIDOwnersGetWithHttpInfo(taskID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all task owners 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        public ApiResponse< ResourceOwners > TasksTaskIDOwnersGetWithHttpInfo (string taskID, string zapTraceSpan = null)
        {
            // verify the required parameter 'taskID' is set
            if (taskID == null)
                throw new ApiException(400, "Missing required parameter 'taskID' when calling UsersService->TasksTaskIDOwnersGet");

            var localVarPath = "/api/v2/tasks/{taskID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskID != null) localVarPathParams.Add("taskID", this.Configuration.ApiClient.ParameterToString(taskID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksTaskIDOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwners>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwners) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwners)));
        }

        /// <summary>
        /// List all task owners 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwners</returns>
        public async System.Threading.Tasks.Task<ResourceOwners> TasksTaskIDOwnersGetAsync (string taskID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwners> localVarResponse = await TasksTaskIDOwnersGetAsyncWithHttpInfo(taskID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all task owners 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> TasksTaskIDOwnersGetAsyncWithHttpInfo (string taskID, string zapTraceSpan = null)
        {
            // verify the required parameter 'taskID' is set
            if (taskID == null)
                throw new ApiException(400, "Missing required parameter 'taskID' when calling UsersService->TasksTaskIDOwnersGet");

            var localVarPath = "/api/v2/tasks/{taskID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskID != null) localVarPathParams.Add("taskID", this.Configuration.ApiClient.ParameterToString(taskID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksTaskIDOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwners>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwners) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwners)));
        }

        /// <summary>
        /// Add task owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        public ResourceOwner TasksTaskIDOwnersPost (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwner> localVarResponse = TasksTaskIDOwnersPostWithHttpInfo(taskID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add task owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        public ApiResponse< ResourceOwner > TasksTaskIDOwnersPostWithHttpInfo (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'taskID' is set
            if (taskID == null)
                throw new ApiException(400, "Missing required parameter 'taskID' when calling UsersService->TasksTaskIDOwnersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->TasksTaskIDOwnersPost");

            var localVarPath = "/api/v2/tasks/{taskID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskID != null) localVarPathParams.Add("taskID", this.Configuration.ApiClient.ParameterToString(taskID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksTaskIDOwnersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwner)));
        }

        /// <summary>
        /// Add task owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwner</returns>
        public async System.Threading.Tasks.Task<ResourceOwner> TasksTaskIDOwnersPostAsync (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwner> localVarResponse = await TasksTaskIDOwnersPostAsyncWithHttpInfo(taskID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add task owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskID">ID of the task</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> TasksTaskIDOwnersPostAsyncWithHttpInfo (string taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'taskID' is set
            if (taskID == null)
                throw new ApiException(400, "Missing required parameter 'taskID' when calling UsersService->TasksTaskIDOwnersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->TasksTaskIDOwnersPost");

            var localVarPath = "/api/v2/tasks/{taskID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskID != null) localVarPathParams.Add("taskID", this.Configuration.ApiClient.ParameterToString(taskID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksTaskIDOwnersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwner)));
        }

        /// <summary>
        /// removes an owner from an task 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void TasksTaskIDOwnersUserIDDelete (string userID, string taskID, string zapTraceSpan = null)
        {
             TasksTaskIDOwnersUserIDDeleteWithHttpInfo(userID, taskID, zapTraceSpan);
        }

        /// <summary>
        /// removes an owner from an task 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TasksTaskIDOwnersUserIDDeleteWithHttpInfo (string userID, string taskID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->TasksTaskIDOwnersUserIDDelete");
            // verify the required parameter 'taskID' is set
            if (taskID == null)
                throw new ApiException(400, "Missing required parameter 'taskID' when calling UsersService->TasksTaskIDOwnersUserIDDelete");

            var localVarPath = "/api/v2/tasks/taskID}/owners/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (taskID != null) localVarPathParams.Add("taskID", this.Configuration.ApiClient.ParameterToString(taskID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksTaskIDOwnersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// removes an owner from an task 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TasksTaskIDOwnersUserIDDeleteAsync (string userID, string taskID, string zapTraceSpan = null)
        {
             await TasksTaskIDOwnersUserIDDeleteAsyncWithHttpInfo(userID, taskID, zapTraceSpan);

        }

        /// <summary>
        /// removes an owner from an task 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="taskID">ID of the task</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TasksTaskIDOwnersUserIDDeleteAsyncWithHttpInfo (string userID, string taskID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->TasksTaskIDOwnersUserIDDelete");
            // verify the required parameter 'taskID' is set
            if (taskID == null)
                throw new ApiException(400, "Missing required parameter 'taskID' when calling UsersService->TasksTaskIDOwnersUserIDDelete");

            var localVarPath = "/api/v2/tasks/taskID}/owners/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (taskID != null) localVarPathParams.Add("taskID", this.Configuration.ApiClient.ParameterToString(taskID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksTaskIDOwnersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all users with member privileges for a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        public ResourceMembers TelegrafsTelegrafIDMembersGet (string telegrafID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMembers> localVarResponse = TelegrafsTelegrafIDMembersGetWithHttpInfo(telegrafID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all users with member privileges for a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        public ApiResponse< ResourceMembers > TelegrafsTelegrafIDMembersGetWithHttpInfo (string telegrafID, string zapTraceSpan = null)
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new ApiException(400, "Missing required parameter 'telegrafID' when calling UsersService->TelegrafsTelegrafIDMembersGet");

            var localVarPath = "/api/v2/telegrafs/{telegrafID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (telegrafID != null) localVarPathParams.Add("telegrafID", this.Configuration.ApiClient.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelegrafsTelegrafIDMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMembers)));
        }

        /// <summary>
        /// List all users with member privileges for a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMembers</returns>
        public async System.Threading.Tasks.Task<ResourceMembers> TelegrafsTelegrafIDMembersGetAsync (string telegrafID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMembers> localVarResponse = await TelegrafsTelegrafIDMembersGetAsyncWithHttpInfo(telegrafID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all users with member privileges for a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> TelegrafsTelegrafIDMembersGetAsyncWithHttpInfo (string telegrafID, string zapTraceSpan = null)
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new ApiException(400, "Missing required parameter 'telegrafID' when calling UsersService->TelegrafsTelegrafIDMembersGet");

            var localVarPath = "/api/v2/telegrafs/{telegrafID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (telegrafID != null) localVarPathParams.Add("telegrafID", this.Configuration.ApiClient.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelegrafsTelegrafIDMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMembers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMembers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMembers)));
        }

        /// <summary>
        /// Add telegraf config member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        public ResourceMember TelegrafsTelegrafIDMembersPost (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMember> localVarResponse = TelegrafsTelegrafIDMembersPostWithHttpInfo(telegrafID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add telegraf config member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        public ApiResponse< ResourceMember > TelegrafsTelegrafIDMembersPostWithHttpInfo (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new ApiException(400, "Missing required parameter 'telegrafID' when calling UsersService->TelegrafsTelegrafIDMembersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->TelegrafsTelegrafIDMembersPost");

            var localVarPath = "/api/v2/telegrafs/{telegrafID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (telegrafID != null) localVarPathParams.Add("telegrafID", this.Configuration.ApiClient.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelegrafsTelegrafIDMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMember)));
        }

        /// <summary>
        /// Add telegraf config member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceMember</returns>
        public async System.Threading.Tasks.Task<ResourceMember> TelegrafsTelegrafIDMembersPostAsync (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceMember> localVarResponse = await TelegrafsTelegrafIDMembersPostAsyncWithHttpInfo(telegrafID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add telegraf config member 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceMember>> TelegrafsTelegrafIDMembersPostAsyncWithHttpInfo (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new ApiException(400, "Missing required parameter 'telegrafID' when calling UsersService->TelegrafsTelegrafIDMembersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->TelegrafsTelegrafIDMembersPost");

            var localVarPath = "/api/v2/telegrafs/{telegrafID}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (telegrafID != null) localVarPathParams.Add("telegrafID", this.Configuration.ApiClient.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelegrafsTelegrafIDMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceMember)));
        }

        /// <summary>
        /// removes a member from a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="telegrafID">ID of the telegraf</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void TelegrafsTelegrafIDMembersUserIDDelete (string userID, string telegrafID, string zapTraceSpan = null)
        {
             TelegrafsTelegrafIDMembersUserIDDeleteWithHttpInfo(userID, telegrafID, zapTraceSpan);
        }

        /// <summary>
        /// removes a member from a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="telegrafID">ID of the telegraf</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TelegrafsTelegrafIDMembersUserIDDeleteWithHttpInfo (string userID, string telegrafID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->TelegrafsTelegrafIDMembersUserIDDelete");
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new ApiException(400, "Missing required parameter 'telegrafID' when calling UsersService->TelegrafsTelegrafIDMembersUserIDDelete");

            var localVarPath = "/api/v2/telegrafs/{telegrafID}/members/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (telegrafID != null) localVarPathParams.Add("telegrafID", this.Configuration.ApiClient.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelegrafsTelegrafIDMembersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// removes a member from a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="telegrafID">ID of the telegraf</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TelegrafsTelegrafIDMembersUserIDDeleteAsync (string userID, string telegrafID, string zapTraceSpan = null)
        {
             await TelegrafsTelegrafIDMembersUserIDDeleteAsyncWithHttpInfo(userID, telegrafID, zapTraceSpan);

        }

        /// <summary>
        /// removes a member from a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of member to remove</param>
        /// <param name="telegrafID">ID of the telegraf</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TelegrafsTelegrafIDMembersUserIDDeleteAsyncWithHttpInfo (string userID, string telegrafID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->TelegrafsTelegrafIDMembersUserIDDelete");
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new ApiException(400, "Missing required parameter 'telegrafID' when calling UsersService->TelegrafsTelegrafIDMembersUserIDDelete");

            var localVarPath = "/api/v2/telegrafs/{telegrafID}/members/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (telegrafID != null) localVarPathParams.Add("telegrafID", this.Configuration.ApiClient.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelegrafsTelegrafIDMembersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all owners of a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        public ResourceOwners TelegrafsTelegrafIDOwnersGet (string telegrafID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwners> localVarResponse = TelegrafsTelegrafIDOwnersGetWithHttpInfo(telegrafID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all owners of a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        public ApiResponse< ResourceOwners > TelegrafsTelegrafIDOwnersGetWithHttpInfo (string telegrafID, string zapTraceSpan = null)
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new ApiException(400, "Missing required parameter 'telegrafID' when calling UsersService->TelegrafsTelegrafIDOwnersGet");

            var localVarPath = "/api/v2/telegrafs/{telegrafID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (telegrafID != null) localVarPathParams.Add("telegrafID", this.Configuration.ApiClient.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelegrafsTelegrafIDOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwners>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwners) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwners)));
        }

        /// <summary>
        /// List all owners of a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwners</returns>
        public async System.Threading.Tasks.Task<ResourceOwners> TelegrafsTelegrafIDOwnersGetAsync (string telegrafID, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwners> localVarResponse = await TelegrafsTelegrafIDOwnersGetAsyncWithHttpInfo(telegrafID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all owners of a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> TelegrafsTelegrafIDOwnersGetAsyncWithHttpInfo (string telegrafID, string zapTraceSpan = null)
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new ApiException(400, "Missing required parameter 'telegrafID' when calling UsersService->TelegrafsTelegrafIDOwnersGet");

            var localVarPath = "/api/v2/telegrafs/{telegrafID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (telegrafID != null) localVarPathParams.Add("telegrafID", this.Configuration.ApiClient.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelegrafsTelegrafIDOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwners>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwners) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwners)));
        }

        /// <summary>
        /// Add telegraf config owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        public ResourceOwner TelegrafsTelegrafIDOwnersPost (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwner> localVarResponse = TelegrafsTelegrafIDOwnersPostWithHttpInfo(telegrafID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add telegraf config owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        public ApiResponse< ResourceOwner > TelegrafsTelegrafIDOwnersPostWithHttpInfo (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new ApiException(400, "Missing required parameter 'telegrafID' when calling UsersService->TelegrafsTelegrafIDOwnersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->TelegrafsTelegrafIDOwnersPost");

            var localVarPath = "/api/v2/telegrafs/{telegrafID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (telegrafID != null) localVarPathParams.Add("telegrafID", this.Configuration.ApiClient.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelegrafsTelegrafIDOwnersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwner)));
        }

        /// <summary>
        /// Add telegraf config owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ResourceOwner</returns>
        public async System.Threading.Tasks.Task<ResourceOwner> TelegrafsTelegrafIDOwnersPostAsync (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
             ApiResponse<ResourceOwner> localVarResponse = await TelegrafsTelegrafIDOwnersPostAsyncWithHttpInfo(telegrafID, addResourceMemberRequestBody, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add telegraf config owner 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="addResourceMemberRequestBody">user to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> TelegrafsTelegrafIDOwnersPostAsyncWithHttpInfo (string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = null)
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new ApiException(400, "Missing required parameter 'telegrafID' when calling UsersService->TelegrafsTelegrafIDOwnersPost");
            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling UsersService->TelegrafsTelegrafIDOwnersPost");

            var localVarPath = "/api/v2/telegrafs/{telegrafID}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (telegrafID != null) localVarPathParams.Add("telegrafID", this.Configuration.ApiClient.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (addResourceMemberRequestBody != null && addResourceMemberRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceMemberRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceMemberRequestBody; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelegrafsTelegrafIDOwnersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceOwner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceOwner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceOwner)));
        }

        /// <summary>
        /// removes an owner from a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void TelegrafsTelegrafIDOwnersUserIDDelete (string userID, string telegrafID, string zapTraceSpan = null)
        {
             TelegrafsTelegrafIDOwnersUserIDDeleteWithHttpInfo(userID, telegrafID, zapTraceSpan);
        }

        /// <summary>
        /// removes an owner from a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TelegrafsTelegrafIDOwnersUserIDDeleteWithHttpInfo (string userID, string telegrafID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->TelegrafsTelegrafIDOwnersUserIDDelete");
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new ApiException(400, "Missing required parameter 'telegrafID' when calling UsersService->TelegrafsTelegrafIDOwnersUserIDDelete");

            var localVarPath = "/api/v2/telegrafs/{telegrafID}/owners/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (telegrafID != null) localVarPathParams.Add("telegrafID", this.Configuration.ApiClient.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelegrafsTelegrafIDOwnersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// removes an owner from a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TelegrafsTelegrafIDOwnersUserIDDeleteAsync (string userID, string telegrafID, string zapTraceSpan = null)
        {
             await TelegrafsTelegrafIDOwnersUserIDDeleteAsyncWithHttpInfo(userID, telegrafID, zapTraceSpan);

        }

        /// <summary>
        /// removes an owner from a telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of owner to remove</param>
        /// <param name="telegrafID">ID of the telegraf config</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TelegrafsTelegrafIDOwnersUserIDDeleteAsyncWithHttpInfo (string userID, string telegrafID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->TelegrafsTelegrafIDOwnersUserIDDelete");
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new ApiException(400, "Missing required parameter 'telegrafID' when calling UsersService->TelegrafsTelegrafIDOwnersUserIDDelete");

            var localVarPath = "/api/v2/telegrafs/{telegrafID}/owners/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (telegrafID != null) localVarPathParams.Add("telegrafID", this.Configuration.ApiClient.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelegrafsTelegrafIDOwnersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all users 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Users</returns>
        public Users UsersGet (string zapTraceSpan = null)
        {
             ApiResponse<Users> localVarResponse = UsersGetWithHttpInfo(zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all users 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Users</returns>
        public ApiResponse< Users > UsersGetWithHttpInfo (string zapTraceSpan = null)
        {

            var localVarPath = "/api/v2/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Users>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Users) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Users)));
        }

        /// <summary>
        /// List all users 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Users</returns>
        public async System.Threading.Tasks.Task<Users> UsersGetAsync (string zapTraceSpan = null)
        {
             ApiResponse<Users> localVarResponse = await UsersGetAsyncWithHttpInfo(zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all users 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Users>> UsersGetAsyncWithHttpInfo (string zapTraceSpan = null)
        {

            var localVarPath = "/api/v2/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Users>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Users) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Users)));
        }

        /// <summary>
        /// Create a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">user to create</param>
        /// <returns>User</returns>
        public User UsersPost (User user)
        {
             ApiResponse<User> localVarResponse = UsersPostWithHttpInfo(user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">user to create</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > UsersPostWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UsersService->UsersPost");

            var localVarPath = "/api/v2/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Create a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">user to create</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UsersPostAsync (User user)
        {
             ApiResponse<User> localVarResponse = await UsersPostAsyncWithHttpInfo(user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">user to create</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UsersPostAsyncWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UsersService->UsersPost");

            var localVarPath = "/api/v2/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// deletes a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void UsersUserIDDelete (string userID, string zapTraceSpan = null)
        {
             UsersUserIDDeleteWithHttpInfo(userID, zapTraceSpan);
        }

        /// <summary>
        /// deletes a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersUserIDDeleteWithHttpInfo (string userID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->UsersUserIDDelete");

            var localVarPath = "/api/v2/users/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// deletes a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersUserIDDeleteAsync (string userID, string zapTraceSpan = null)
        {
             await UsersUserIDDeleteAsyncWithHttpInfo(userID, zapTraceSpan);

        }

        /// <summary>
        /// deletes a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersUserIDDeleteAsyncWithHttpInfo (string userID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->UsersUserIDDelete");

            var localVarPath = "/api/v2/users/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUserIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>User</returns>
        public User UsersUserIDGet (string userID, string zapTraceSpan = null)
        {
             ApiResponse<User> localVarResponse = UsersUserIDGetWithHttpInfo(userID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > UsersUserIDGetWithHttpInfo (string userID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->UsersUserIDGet");

            var localVarPath = "/api/v2/users/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUserIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Retrieve a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UsersUserIDGetAsync (string userID, string zapTraceSpan = null)
        {
             ApiResponse<User> localVarResponse = await UsersUserIDGetAsyncWithHttpInfo(userID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to get</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UsersUserIDGetAsyncWithHttpInfo (string userID, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->UsersUserIDGet");

            var localVarPath = "/api/v2/users/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUserIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Retrieve operation logs for a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>OperationLogs</returns>
        public OperationLogs UsersUserIDLogsGet (string userID, string zapTraceSpan = null, int? offset = null, int? limit = null)
        {
             ApiResponse<OperationLogs> localVarResponse = UsersUserIDLogsGetWithHttpInfo(userID, zapTraceSpan, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve operation logs for a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>ApiResponse of OperationLogs</returns>
        public ApiResponse< OperationLogs > UsersUserIDLogsGetWithHttpInfo (string userID, string zapTraceSpan = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->UsersUserIDLogsGet");

            var localVarPath = "/api/v2/users/{userID}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUserIDLogsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationLogs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationLogs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationLogs)));
        }

        /// <summary>
        /// Retrieve operation logs for a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>Task of OperationLogs</returns>
        public async System.Threading.Tasks.Task<OperationLogs> UsersUserIDLogsGetAsync (string userID, string zapTraceSpan = null, int? offset = null, int? limit = null)
        {
             ApiResponse<OperationLogs> localVarResponse = await UsersUserIDLogsGetAsyncWithHttpInfo(userID, zapTraceSpan, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve operation logs for a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (OperationLogs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationLogs>> UsersUserIDLogsGetAsyncWithHttpInfo (string userID, string zapTraceSpan = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->UsersUserIDLogsGet");

            var localVarPath = "/api/v2/users/{userID}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUserIDLogsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationLogs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationLogs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationLogs)));
        }

        /// <summary>
        /// Update password 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns></returns>
        public void UsersUserIDPasswordPut (string userID, PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null)
        {
             UsersUserIDPasswordPutWithHttpInfo(userID, passwordResetBody, zapTraceSpan, authorization);
        }

        /// <summary>
        /// Update password 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersUserIDPasswordPutWithHttpInfo (string userID, PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->UsersUserIDPasswordPut");
            // verify the required parameter 'passwordResetBody' is set
            if (passwordResetBody == null)
                throw new ApiException(400, "Missing required parameter 'passwordResetBody' when calling UsersService->UsersUserIDPasswordPut");

            var localVarPath = "/api/v2/users/{userID}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (passwordResetBody != null && passwordResetBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(passwordResetBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = passwordResetBody; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUserIDPasswordPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update password 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersUserIDPasswordPutAsync (string userID, PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null)
        {
             await UsersUserIDPasswordPutAsyncWithHttpInfo(userID, passwordResetBody, zapTraceSpan, authorization);

        }

        /// <summary>
        /// Update password 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of the user</param>
        /// <param name="passwordResetBody">new password</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="authorization">An auth credential for the Basic scheme (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersUserIDPasswordPutAsyncWithHttpInfo (string userID, PasswordResetBody passwordResetBody, string zapTraceSpan = null, String authorization = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->UsersUserIDPasswordPut");
            // verify the required parameter 'passwordResetBody' is set
            if (passwordResetBody == null)
                throw new ApiException(400, "Missing required parameter 'passwordResetBody' when calling UsersService->UsersUserIDPasswordPut");

            var localVarPath = "/api/v2/users/{userID}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (passwordResetBody != null && passwordResetBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(passwordResetBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = passwordResetBody; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUserIDPasswordPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to update</param>
        /// <param name="user">user update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>User</returns>
        public User UsersUserIDPatch (string userID, User user, string zapTraceSpan = null)
        {
             ApiResponse<User> localVarResponse = UsersUserIDPatchWithHttpInfo(userID, user, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to update</param>
        /// <param name="user">user update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > UsersUserIDPatchWithHttpInfo (string userID, User user, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->UsersUserIDPatch");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UsersService->UsersUserIDPatch");

            var localVarPath = "/api/v2/users/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUserIDPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Update a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to update</param>
        /// <param name="user">user update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UsersUserIDPatchAsync (string userID, User user, string zapTraceSpan = null)
        {
             ApiResponse<User> localVarResponse = await UsersUserIDPatchAsyncWithHttpInfo(userID, user, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">ID of user to update</param>
        /// <param name="user">user update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UsersUserIDPatchAsyncWithHttpInfo (string userID, User user, string zapTraceSpan = null)
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new ApiException(400, "Missing required parameter 'userID' when calling UsersService->UsersUserIDPatch");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UsersService->UsersUserIDPatch");

            var localVarPath = "/api/v2/users/{userID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userID != null) localVarPathParams.Add("userID", this.Configuration.ApiClient.ParameterToString(userID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUserIDPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

    }
}
