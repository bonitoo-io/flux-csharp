/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using InfluxDB.Client.Generated.Client;
using InfluxDB.Client.Generated.Domain;

namespace InfluxDB.Client.Generated.Service
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesService : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the name of the organization of the template (optional)</param>
        /// <param name="orgID">specifies the organization id of the template (optional)</param>
        /// <returns>Documents</returns>
        Documents DocumentsTemplatesGet (string zapTraceSpan = null, string org = null, string orgID = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the name of the organization of the template (optional)</param>
        /// <param name="orgID">specifies the organization id of the template (optional)</param>
        /// <returns>ApiResponse of Documents</returns>
        ApiResponse<Documents> DocumentsTemplatesGetWithHttpInfo (string zapTraceSpan = null, string org = null, string orgID = null);
        /// <summary>
        /// Create a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCreate">template that will be created</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Document</returns>
        Document DocumentsTemplatesPost (DocumentCreate documentCreate, string zapTraceSpan = null);

        /// <summary>
        /// Create a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCreate">template that will be created</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Document</returns>
        ApiResponse<Document> DocumentsTemplatesPostWithHttpInfo (DocumentCreate documentCreate, string zapTraceSpan = null);
        /// <summary>
        /// delete a template document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DocumentsTemplatesTemplateIDDelete (string templateID, string zapTraceSpan = null);

        /// <summary>
        /// delete a template document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentsTemplatesTemplateIDDeleteWithHttpInfo (string templateID, string zapTraceSpan = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Document</returns>
        Document DocumentsTemplatesTemplateIDGet (string templateID, string zapTraceSpan = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Document</returns>
        ApiResponse<Document> DocumentsTemplatesTemplateIDGetWithHttpInfo (string templateID, string zapTraceSpan = null);
        /// <summary>
        /// list all labels for a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelsResponse</returns>
        LabelsResponse DocumentsTemplatesTemplateIDLabelsGet (string templateID, string zapTraceSpan = null);

        /// <summary>
        /// list all labels for a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelsResponse</returns>
        ApiResponse<LabelsResponse> DocumentsTemplatesTemplateIDLabelsGetWithHttpInfo (string templateID, string zapTraceSpan = null);
        /// <summary>
        /// delete a label from a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelID">the label ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DocumentsTemplatesTemplateIDLabelsLabelIDDelete (string templateID, string labelID, string zapTraceSpan = null);

        /// <summary>
        /// delete a label from a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelID">the label ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentsTemplatesTemplateIDLabelsLabelIDDeleteWithHttpInfo (string templateID, string labelID, string zapTraceSpan = null);
        /// <summary>
        /// add a label to a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelResponse</returns>
        LabelResponse DocumentsTemplatesTemplateIDLabelsPost (string templateID, LabelMapping labelMapping, string zapTraceSpan = null);

        /// <summary>
        /// add a label to a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        ApiResponse<LabelResponse> DocumentsTemplatesTemplateIDLabelsPostWithHttpInfo (string templateID, LabelMapping labelMapping, string zapTraceSpan = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="documentUpdate">template that will be updated</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Document</returns>
        Document DocumentsTemplatesTemplateIDPut (string templateID, DocumentUpdate documentUpdate, string zapTraceSpan = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="documentUpdate">template that will be updated</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Document</returns>
        ApiResponse<Document> DocumentsTemplatesTemplateIDPutWithHttpInfo (string templateID, DocumentUpdate documentUpdate, string zapTraceSpan = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the name of the organization of the template (optional)</param>
        /// <param name="orgID">specifies the organization id of the template (optional)</param>
        /// <returns>Task of Documents</returns>
        System.Threading.Tasks.Task<Documents> DocumentsTemplatesGetAsync (string zapTraceSpan = null, string org = null, string orgID = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the name of the organization of the template (optional)</param>
        /// <param name="orgID">specifies the organization id of the template (optional)</param>
        /// <returns>Task of ApiResponse (Documents)</returns>
        System.Threading.Tasks.Task<ApiResponse<Documents>> DocumentsTemplatesGetAsyncWithHttpInfo (string zapTraceSpan = null, string org = null, string orgID = null);
        /// <summary>
        /// Create a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCreate">template that will be created</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Document</returns>
        System.Threading.Tasks.Task<Document> DocumentsTemplatesPostAsync (DocumentCreate documentCreate, string zapTraceSpan = null);

        /// <summary>
        /// Create a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCreate">template that will be created</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        System.Threading.Tasks.Task<ApiResponse<Document>> DocumentsTemplatesPostAsyncWithHttpInfo (DocumentCreate documentCreate, string zapTraceSpan = null);
        /// <summary>
        /// delete a template document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentsTemplatesTemplateIDDeleteAsync (string templateID, string zapTraceSpan = null);

        /// <summary>
        /// delete a template document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsTemplatesTemplateIDDeleteAsyncWithHttpInfo (string templateID, string zapTraceSpan = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Document</returns>
        System.Threading.Tasks.Task<Document> DocumentsTemplatesTemplateIDGetAsync (string templateID, string zapTraceSpan = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        System.Threading.Tasks.Task<ApiResponse<Document>> DocumentsTemplatesTemplateIDGetAsyncWithHttpInfo (string templateID, string zapTraceSpan = null);
        /// <summary>
        /// list all labels for a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of LabelsResponse</returns>
        System.Threading.Tasks.Task<LabelsResponse> DocumentsTemplatesTemplateIDLabelsGetAsync (string templateID, string zapTraceSpan = null);

        /// <summary>
        /// list all labels for a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (LabelsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LabelsResponse>> DocumentsTemplatesTemplateIDLabelsGetAsyncWithHttpInfo (string templateID, string zapTraceSpan = null);
        /// <summary>
        /// delete a label from a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelID">the label ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentsTemplatesTemplateIDLabelsLabelIDDeleteAsync (string templateID, string labelID, string zapTraceSpan = null);

        /// <summary>
        /// delete a label from a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelID">the label ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsTemplatesTemplateIDLabelsLabelIDDeleteAsyncWithHttpInfo (string templateID, string labelID, string zapTraceSpan = null);
        /// <summary>
        /// add a label to a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of LabelResponse</returns>
        System.Threading.Tasks.Task<LabelResponse> DocumentsTemplatesTemplateIDLabelsPostAsync (string templateID, LabelMapping labelMapping, string zapTraceSpan = null);

        /// <summary>
        /// add a label to a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LabelResponse>> DocumentsTemplatesTemplateIDLabelsPostAsyncWithHttpInfo (string templateID, LabelMapping labelMapping, string zapTraceSpan = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="documentUpdate">template that will be updated</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Document</returns>
        System.Threading.Tasks.Task<Document> DocumentsTemplatesTemplateIDPutAsync (string templateID, DocumentUpdate documentUpdate, string zapTraceSpan = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="documentUpdate">template that will be updated</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        System.Threading.Tasks.Task<ApiResponse<Document>> DocumentsTemplatesTemplateIDPutAsyncWithHttpInfo (string templateID, DocumentUpdate documentUpdate, string zapTraceSpan = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplatesService : ITemplatesService
    {
        private InfluxDB.Client.Generated.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesService"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesService(String basePath)
        {
            this.Configuration = new InfluxDB.Client.Generated.Client.Configuration { BasePath = basePath };

            ExceptionFactory = InfluxDB.Client.Generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesService"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplatesService(InfluxDB.Client.Generated.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = InfluxDB.Client.Generated.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = InfluxDB.Client.Generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InfluxDB.Client.Generated.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InfluxDB.Client.Generated.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the name of the organization of the template (optional)</param>
        /// <param name="orgID">specifies the organization id of the template (optional)</param>
        /// <returns>Documents</returns>
        public Documents DocumentsTemplatesGet (string zapTraceSpan = null, string org = null, string orgID = null)
        {
             ApiResponse<Documents> localVarResponse = DocumentsTemplatesGetWithHttpInfo(zapTraceSpan, org, orgID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the name of the organization of the template (optional)</param>
        /// <param name="orgID">specifies the organization id of the template (optional)</param>
        /// <returns>ApiResponse of Documents</returns>
        public ApiResponse< Documents > DocumentsTemplatesGetWithHttpInfo (string zapTraceSpan = null, string org = null, string orgID = null)
        {

            var localVarPath = "/documents/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (org != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            if (orgID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Documents>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Documents) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Documents)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the name of the organization of the template (optional)</param>
        /// <param name="orgID">specifies the organization id of the template (optional)</param>
        /// <returns>Task of Documents</returns>
        public async System.Threading.Tasks.Task<Documents> DocumentsTemplatesGetAsync (string zapTraceSpan = null, string org = null, string orgID = null)
        {
             ApiResponse<Documents> localVarResponse = await DocumentsTemplatesGetAsyncWithHttpInfo(zapTraceSpan, org, orgID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the name of the organization of the template (optional)</param>
        /// <param name="orgID">specifies the organization id of the template (optional)</param>
        /// <returns>Task of ApiResponse (Documents)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Documents>> DocumentsTemplatesGetAsyncWithHttpInfo (string zapTraceSpan = null, string org = null, string orgID = null)
        {

            var localVarPath = "/documents/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (org != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            if (orgID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Documents>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Documents) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Documents)));
        }

        /// <summary>
        /// Create a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCreate">template that will be created</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Document</returns>
        public Document DocumentsTemplatesPost (DocumentCreate documentCreate, string zapTraceSpan = null)
        {
             ApiResponse<Document> localVarResponse = DocumentsTemplatesPostWithHttpInfo(documentCreate, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCreate">template that will be created</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Document</returns>
        public ApiResponse< Document > DocumentsTemplatesPostWithHttpInfo (DocumentCreate documentCreate, string zapTraceSpan = null)
        {
            // verify the required parameter 'documentCreate' is set
            if (documentCreate == null)
                throw new ApiException(400, "Missing required parameter 'documentCreate' when calling TemplatesService->DocumentsTemplatesPost");

            var localVarPath = "/documents/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (documentCreate != null && documentCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentCreate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Document>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Document) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Document)));
        }

        /// <summary>
        /// Create a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCreate">template that will be created</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Document</returns>
        public async System.Threading.Tasks.Task<Document> DocumentsTemplatesPostAsync (DocumentCreate documentCreate, string zapTraceSpan = null)
        {
             ApiResponse<Document> localVarResponse = await DocumentsTemplatesPostAsyncWithHttpInfo(documentCreate, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentCreate">template that will be created</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Document>> DocumentsTemplatesPostAsyncWithHttpInfo (DocumentCreate documentCreate, string zapTraceSpan = null)
        {
            // verify the required parameter 'documentCreate' is set
            if (documentCreate == null)
                throw new ApiException(400, "Missing required parameter 'documentCreate' when calling TemplatesService->DocumentsTemplatesPost");

            var localVarPath = "/documents/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (documentCreate != null && documentCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentCreate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Document>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Document) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Document)));
        }

        /// <summary>
        /// delete a template document 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DocumentsTemplatesTemplateIDDelete (string templateID, string zapTraceSpan = null)
        {
             DocumentsTemplatesTemplateIDDeleteWithHttpInfo(templateID, zapTraceSpan);
        }

        /// <summary>
        /// delete a template document 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentsTemplatesTemplateIDDeleteWithHttpInfo (string templateID, string zapTraceSpan = null)
        {
            // verify the required parameter 'templateID' is set
            if (templateID == null)
                throw new ApiException(400, "Missing required parameter 'templateID' when calling TemplatesService->DocumentsTemplatesTemplateIDDelete");

            var localVarPath = "/documents/templates/{templateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateID != null) localVarPathParams.Add("templateID", this.Configuration.ApiClient.ParameterToString(templateID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesTemplateIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// delete a template document 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentsTemplatesTemplateIDDeleteAsync (string templateID, string zapTraceSpan = null)
        {
             await DocumentsTemplatesTemplateIDDeleteAsyncWithHttpInfo(templateID, zapTraceSpan);

        }

        /// <summary>
        /// delete a template document 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsTemplatesTemplateIDDeleteAsyncWithHttpInfo (string templateID, string zapTraceSpan = null)
        {
            // verify the required parameter 'templateID' is set
            if (templateID == null)
                throw new ApiException(400, "Missing required parameter 'templateID' when calling TemplatesService->DocumentsTemplatesTemplateIDDelete");

            var localVarPath = "/documents/templates/{templateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateID != null) localVarPathParams.Add("templateID", this.Configuration.ApiClient.ParameterToString(templateID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesTemplateIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Document</returns>
        public Document DocumentsTemplatesTemplateIDGet (string templateID, string zapTraceSpan = null)
        {
             ApiResponse<Document> localVarResponse = DocumentsTemplatesTemplateIDGetWithHttpInfo(templateID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Document</returns>
        public ApiResponse< Document > DocumentsTemplatesTemplateIDGetWithHttpInfo (string templateID, string zapTraceSpan = null)
        {
            // verify the required parameter 'templateID' is set
            if (templateID == null)
                throw new ApiException(400, "Missing required parameter 'templateID' when calling TemplatesService->DocumentsTemplatesTemplateIDGet");

            var localVarPath = "/documents/templates/{templateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateID != null) localVarPathParams.Add("templateID", this.Configuration.ApiClient.ParameterToString(templateID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesTemplateIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Document>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Document) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Document)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Document</returns>
        public async System.Threading.Tasks.Task<Document> DocumentsTemplatesTemplateIDGetAsync (string templateID, string zapTraceSpan = null)
        {
             ApiResponse<Document> localVarResponse = await DocumentsTemplatesTemplateIDGetAsyncWithHttpInfo(templateID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Document>> DocumentsTemplatesTemplateIDGetAsyncWithHttpInfo (string templateID, string zapTraceSpan = null)
        {
            // verify the required parameter 'templateID' is set
            if (templateID == null)
                throw new ApiException(400, "Missing required parameter 'templateID' when calling TemplatesService->DocumentsTemplatesTemplateIDGet");

            var localVarPath = "/documents/templates/{templateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateID != null) localVarPathParams.Add("templateID", this.Configuration.ApiClient.ParameterToString(templateID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesTemplateIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Document>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Document) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Document)));
        }

        /// <summary>
        /// list all labels for a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelsResponse</returns>
        public LabelsResponse DocumentsTemplatesTemplateIDLabelsGet (string templateID, string zapTraceSpan = null)
        {
             ApiResponse<LabelsResponse> localVarResponse = DocumentsTemplatesTemplateIDLabelsGetWithHttpInfo(templateID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// list all labels for a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelsResponse</returns>
        public ApiResponse< LabelsResponse > DocumentsTemplatesTemplateIDLabelsGetWithHttpInfo (string templateID, string zapTraceSpan = null)
        {
            // verify the required parameter 'templateID' is set
            if (templateID == null)
                throw new ApiException(400, "Missing required parameter 'templateID' when calling TemplatesService->DocumentsTemplatesTemplateIDLabelsGet");

            var localVarPath = "/documents/templates/{templateID}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateID != null) localVarPathParams.Add("templateID", this.Configuration.ApiClient.ParameterToString(templateID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesTemplateIDLabelsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelsResponse)));
        }

        /// <summary>
        /// list all labels for a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of LabelsResponse</returns>
        public async System.Threading.Tasks.Task<LabelsResponse> DocumentsTemplatesTemplateIDLabelsGetAsync (string templateID, string zapTraceSpan = null)
        {
             ApiResponse<LabelsResponse> localVarResponse = await DocumentsTemplatesTemplateIDLabelsGetAsyncWithHttpInfo(templateID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// list all labels for a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (LabelsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LabelsResponse>> DocumentsTemplatesTemplateIDLabelsGetAsyncWithHttpInfo (string templateID, string zapTraceSpan = null)
        {
            // verify the required parameter 'templateID' is set
            if (templateID == null)
                throw new ApiException(400, "Missing required parameter 'templateID' when calling TemplatesService->DocumentsTemplatesTemplateIDLabelsGet");

            var localVarPath = "/documents/templates/{templateID}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateID != null) localVarPathParams.Add("templateID", this.Configuration.ApiClient.ParameterToString(templateID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesTemplateIDLabelsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelsResponse)));
        }

        /// <summary>
        /// delete a label from a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelID">the label ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DocumentsTemplatesTemplateIDLabelsLabelIDDelete (string templateID, string labelID, string zapTraceSpan = null)
        {
             DocumentsTemplatesTemplateIDLabelsLabelIDDeleteWithHttpInfo(templateID, labelID, zapTraceSpan);
        }

        /// <summary>
        /// delete a label from a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelID">the label ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentsTemplatesTemplateIDLabelsLabelIDDeleteWithHttpInfo (string templateID, string labelID, string zapTraceSpan = null)
        {
            // verify the required parameter 'templateID' is set
            if (templateID == null)
                throw new ApiException(400, "Missing required parameter 'templateID' when calling TemplatesService->DocumentsTemplatesTemplateIDLabelsLabelIDDelete");
            // verify the required parameter 'labelID' is set
            if (labelID == null)
                throw new ApiException(400, "Missing required parameter 'labelID' when calling TemplatesService->DocumentsTemplatesTemplateIDLabelsLabelIDDelete");

            var localVarPath = "/documents/templates/{templateID}/labels/{labelID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateID != null) localVarPathParams.Add("templateID", this.Configuration.ApiClient.ParameterToString(templateID)); // path parameter
            if (labelID != null) localVarPathParams.Add("labelID", this.Configuration.ApiClient.ParameterToString(labelID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesTemplateIDLabelsLabelIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// delete a label from a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelID">the label ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentsTemplatesTemplateIDLabelsLabelIDDeleteAsync (string templateID, string labelID, string zapTraceSpan = null)
        {
             await DocumentsTemplatesTemplateIDLabelsLabelIDDeleteAsyncWithHttpInfo(templateID, labelID, zapTraceSpan);

        }

        /// <summary>
        /// delete a label from a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelID">the label ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsTemplatesTemplateIDLabelsLabelIDDeleteAsyncWithHttpInfo (string templateID, string labelID, string zapTraceSpan = null)
        {
            // verify the required parameter 'templateID' is set
            if (templateID == null)
                throw new ApiException(400, "Missing required parameter 'templateID' when calling TemplatesService->DocumentsTemplatesTemplateIDLabelsLabelIDDelete");
            // verify the required parameter 'labelID' is set
            if (labelID == null)
                throw new ApiException(400, "Missing required parameter 'labelID' when calling TemplatesService->DocumentsTemplatesTemplateIDLabelsLabelIDDelete");

            var localVarPath = "/documents/templates/{templateID}/labels/{labelID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateID != null) localVarPathParams.Add("templateID", this.Configuration.ApiClient.ParameterToString(templateID)); // path parameter
            if (labelID != null) localVarPathParams.Add("labelID", this.Configuration.ApiClient.ParameterToString(labelID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesTemplateIDLabelsLabelIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// add a label to a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelResponse</returns>
        public LabelResponse DocumentsTemplatesTemplateIDLabelsPost (string templateID, LabelMapping labelMapping, string zapTraceSpan = null)
        {
             ApiResponse<LabelResponse> localVarResponse = DocumentsTemplatesTemplateIDLabelsPostWithHttpInfo(templateID, labelMapping, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// add a label to a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        public ApiResponse< LabelResponse > DocumentsTemplatesTemplateIDLabelsPostWithHttpInfo (string templateID, LabelMapping labelMapping, string zapTraceSpan = null)
        {
            // verify the required parameter 'templateID' is set
            if (templateID == null)
                throw new ApiException(400, "Missing required parameter 'templateID' when calling TemplatesService->DocumentsTemplatesTemplateIDLabelsPost");
            // verify the required parameter 'labelMapping' is set
            if (labelMapping == null)
                throw new ApiException(400, "Missing required parameter 'labelMapping' when calling TemplatesService->DocumentsTemplatesTemplateIDLabelsPost");

            var localVarPath = "/documents/templates/{templateID}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateID != null) localVarPathParams.Add("templateID", this.Configuration.ApiClient.ParameterToString(templateID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (labelMapping != null && labelMapping.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(labelMapping); // http body (model) parameter
            }
            else
            {
                localVarPostBody = labelMapping; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesTemplateIDLabelsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelResponse)));
        }

        /// <summary>
        /// add a label to a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of LabelResponse</returns>
        public async System.Threading.Tasks.Task<LabelResponse> DocumentsTemplatesTemplateIDLabelsPostAsync (string templateID, LabelMapping labelMapping, string zapTraceSpan = null)
        {
             ApiResponse<LabelResponse> localVarResponse = await DocumentsTemplatesTemplateIDLabelsPostAsyncWithHttpInfo(templateID, labelMapping, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// add a label to a template 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LabelResponse>> DocumentsTemplatesTemplateIDLabelsPostAsyncWithHttpInfo (string templateID, LabelMapping labelMapping, string zapTraceSpan = null)
        {
            // verify the required parameter 'templateID' is set
            if (templateID == null)
                throw new ApiException(400, "Missing required parameter 'templateID' when calling TemplatesService->DocumentsTemplatesTemplateIDLabelsPost");
            // verify the required parameter 'labelMapping' is set
            if (labelMapping == null)
                throw new ApiException(400, "Missing required parameter 'labelMapping' when calling TemplatesService->DocumentsTemplatesTemplateIDLabelsPost");

            var localVarPath = "/documents/templates/{templateID}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateID != null) localVarPathParams.Add("templateID", this.Configuration.ApiClient.ParameterToString(templateID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (labelMapping != null && labelMapping.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(labelMapping); // http body (model) parameter
            }
            else
            {
                localVarPostBody = labelMapping; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesTemplateIDLabelsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="documentUpdate">template that will be updated</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Document</returns>
        public Document DocumentsTemplatesTemplateIDPut (string templateID, DocumentUpdate documentUpdate, string zapTraceSpan = null)
        {
             ApiResponse<Document> localVarResponse = DocumentsTemplatesTemplateIDPutWithHttpInfo(templateID, documentUpdate, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="documentUpdate">template that will be updated</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Document</returns>
        public ApiResponse< Document > DocumentsTemplatesTemplateIDPutWithHttpInfo (string templateID, DocumentUpdate documentUpdate, string zapTraceSpan = null)
        {
            // verify the required parameter 'templateID' is set
            if (templateID == null)
                throw new ApiException(400, "Missing required parameter 'templateID' when calling TemplatesService->DocumentsTemplatesTemplateIDPut");
            // verify the required parameter 'documentUpdate' is set
            if (documentUpdate == null)
                throw new ApiException(400, "Missing required parameter 'documentUpdate' when calling TemplatesService->DocumentsTemplatesTemplateIDPut");

            var localVarPath = "/documents/templates/{templateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateID != null) localVarPathParams.Add("templateID", this.Configuration.ApiClient.ParameterToString(templateID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (documentUpdate != null && documentUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentUpdate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesTemplateIDPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Document>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Document) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Document)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="documentUpdate">template that will be updated</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Document</returns>
        public async System.Threading.Tasks.Task<Document> DocumentsTemplatesTemplateIDPutAsync (string templateID, DocumentUpdate documentUpdate, string zapTraceSpan = null)
        {
             ApiResponse<Document> localVarResponse = await DocumentsTemplatesTemplateIDPutAsyncWithHttpInfo(templateID, documentUpdate, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateID">ID of template</param>
        /// <param name="documentUpdate">template that will be updated</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Document>> DocumentsTemplatesTemplateIDPutAsyncWithHttpInfo (string templateID, DocumentUpdate documentUpdate, string zapTraceSpan = null)
        {
            // verify the required parameter 'templateID' is set
            if (templateID == null)
                throw new ApiException(400, "Missing required parameter 'templateID' when calling TemplatesService->DocumentsTemplatesTemplateIDPut");
            // verify the required parameter 'documentUpdate' is set
            if (documentUpdate == null)
                throw new ApiException(400, "Missing required parameter 'documentUpdate' when calling TemplatesService->DocumentsTemplatesTemplateIDPut");

            var localVarPath = "/documents/templates/{templateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateID != null) localVarPathParams.Add("templateID", this.Configuration.ApiClient.ParameterToString(templateID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (documentUpdate != null && documentUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentUpdate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsTemplatesTemplateIDPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Document>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Document) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Document)));
        }

    }
}
