/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using InfluxDB.Client.Generated.Client;
using InfluxDB.Client.Generated.Domain;

namespace InfluxDB.Client.Generated.Service
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVariablesService : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// get all variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <returns>Variables</returns>
        Variables VariablesGet (string zapTraceSpan = null, string org = null, string orgID = null);

        /// <summary>
        /// get all variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <returns>ApiResponse of Variables</returns>
        ApiResponse<Variables> VariablesGetWithHttpInfo (string zapTraceSpan = null, string org = null, string orgID = null);
        /// <summary>
        /// create a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variable">variable to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Variable</returns>
        Variable VariablesPost (Variable variable, string zapTraceSpan = null);

        /// <summary>
        /// create a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variable">variable to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Variable</returns>
        ApiResponse<Variable> VariablesPostWithHttpInfo (Variable variable, string zapTraceSpan = null);
        /// <summary>
        /// delete a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void VariablesVariableIDDelete (string variableID, string zapTraceSpan = null);

        /// <summary>
        /// delete a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VariablesVariableIDDeleteWithHttpInfo (string variableID, string zapTraceSpan = null);
        /// <summary>
        /// get a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Variable</returns>
        Variable VariablesVariableIDGet (string variableID, string zapTraceSpan = null);

        /// <summary>
        /// get a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Variable</returns>
        ApiResponse<Variable> VariablesVariableIDGetWithHttpInfo (string variableID, string zapTraceSpan = null);
        /// <summary>
        /// list all labels for a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelsResponse</returns>
        LabelsResponse VariablesVariableIDLabelsGet (string variableID, string zapTraceSpan = null);

        /// <summary>
        /// list all labels for a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelsResponse</returns>
        ApiResponse<LabelsResponse> VariablesVariableIDLabelsGetWithHttpInfo (string variableID, string zapTraceSpan = null);
        /// <summary>
        /// delete a label from a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void VariablesVariableIDLabelsLabelIDDelete (string variableID, string labelID, string zapTraceSpan = null);

        /// <summary>
        /// delete a label from a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VariablesVariableIDLabelsLabelIDDeleteWithHttpInfo (string variableID, string labelID, string zapTraceSpan = null);
        /// <summary>
        /// add a label to a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelResponse</returns>
        LabelResponse VariablesVariableIDLabelsPost (string variableID, LabelMapping labelMapping, string zapTraceSpan = null);

        /// <summary>
        /// add a label to a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        ApiResponse<LabelResponse> VariablesVariableIDLabelsPostWithHttpInfo (string variableID, LabelMapping labelMapping, string zapTraceSpan = null);
        /// <summary>
        /// update a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Variable</returns>
        Variable VariablesVariableIDPatch (string variableID, Variable variable, string zapTraceSpan = null);

        /// <summary>
        /// update a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Variable</returns>
        ApiResponse<Variable> VariablesVariableIDPatchWithHttpInfo (string variableID, Variable variable, string zapTraceSpan = null);
        /// <summary>
        /// replace a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable to replace</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Variable</returns>
        Variable VariablesVariableIDPut (string variableID, Variable variable, string zapTraceSpan = null);

        /// <summary>
        /// replace a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable to replace</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Variable</returns>
        ApiResponse<Variable> VariablesVariableIDPutWithHttpInfo (string variableID, Variable variable, string zapTraceSpan = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// get all variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <returns>Task of Variables</returns>
        System.Threading.Tasks.Task<Variables> VariablesGetAsync (string zapTraceSpan = null, string org = null, string orgID = null);

        /// <summary>
        /// get all variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <returns>Task of ApiResponse (Variables)</returns>
        System.Threading.Tasks.Task<ApiResponse<Variables>> VariablesGetAsyncWithHttpInfo (string zapTraceSpan = null, string org = null, string orgID = null);
        /// <summary>
        /// create a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variable">variable to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Variable</returns>
        System.Threading.Tasks.Task<Variable> VariablesPostAsync (Variable variable, string zapTraceSpan = null);

        /// <summary>
        /// create a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variable">variable to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        System.Threading.Tasks.Task<ApiResponse<Variable>> VariablesPostAsyncWithHttpInfo (Variable variable, string zapTraceSpan = null);
        /// <summary>
        /// delete a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VariablesVariableIDDeleteAsync (string variableID, string zapTraceSpan = null);

        /// <summary>
        /// delete a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VariablesVariableIDDeleteAsyncWithHttpInfo (string variableID, string zapTraceSpan = null);
        /// <summary>
        /// get a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Variable</returns>
        System.Threading.Tasks.Task<Variable> VariablesVariableIDGetAsync (string variableID, string zapTraceSpan = null);

        /// <summary>
        /// get a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        System.Threading.Tasks.Task<ApiResponse<Variable>> VariablesVariableIDGetAsyncWithHttpInfo (string variableID, string zapTraceSpan = null);
        /// <summary>
        /// list all labels for a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of LabelsResponse</returns>
        System.Threading.Tasks.Task<LabelsResponse> VariablesVariableIDLabelsGetAsync (string variableID, string zapTraceSpan = null);

        /// <summary>
        /// list all labels for a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (LabelsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LabelsResponse>> VariablesVariableIDLabelsGetAsyncWithHttpInfo (string variableID, string zapTraceSpan = null);
        /// <summary>
        /// delete a label from a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VariablesVariableIDLabelsLabelIDDeleteAsync (string variableID, string labelID, string zapTraceSpan = null);

        /// <summary>
        /// delete a label from a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VariablesVariableIDLabelsLabelIDDeleteAsyncWithHttpInfo (string variableID, string labelID, string zapTraceSpan = null);
        /// <summary>
        /// add a label to a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of LabelResponse</returns>
        System.Threading.Tasks.Task<LabelResponse> VariablesVariableIDLabelsPostAsync (string variableID, LabelMapping labelMapping, string zapTraceSpan = null);

        /// <summary>
        /// add a label to a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LabelResponse>> VariablesVariableIDLabelsPostAsyncWithHttpInfo (string variableID, LabelMapping labelMapping, string zapTraceSpan = null);
        /// <summary>
        /// update a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Variable</returns>
        System.Threading.Tasks.Task<Variable> VariablesVariableIDPatchAsync (string variableID, Variable variable, string zapTraceSpan = null);

        /// <summary>
        /// update a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        System.Threading.Tasks.Task<ApiResponse<Variable>> VariablesVariableIDPatchAsyncWithHttpInfo (string variableID, Variable variable, string zapTraceSpan = null);
        /// <summary>
        /// replace a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable to replace</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Variable</returns>
        System.Threading.Tasks.Task<Variable> VariablesVariableIDPutAsync (string variableID, Variable variable, string zapTraceSpan = null);

        /// <summary>
        /// replace a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable to replace</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        System.Threading.Tasks.Task<ApiResponse<Variable>> VariablesVariableIDPutAsyncWithHttpInfo (string variableID, Variable variable, string zapTraceSpan = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VariablesService : IVariablesService
    {
        private InfluxDB.Client.Generated.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VariablesService"/> class.
        /// </summary>
        /// <returns></returns>
        public VariablesService(String basePath)
        {
            this.Configuration = new InfluxDB.Client.Generated.Client.Configuration { BasePath = basePath };

            ExceptionFactory = InfluxDB.Client.Generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VariablesService"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VariablesService(InfluxDB.Client.Generated.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = InfluxDB.Client.Generated.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = InfluxDB.Client.Generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InfluxDB.Client.Generated.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InfluxDB.Client.Generated.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// get all variables 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <returns>Variables</returns>
        public Variables VariablesGet (string zapTraceSpan = null, string org = null, string orgID = null)
        {
             ApiResponse<Variables> localVarResponse = VariablesGetWithHttpInfo(zapTraceSpan, org, orgID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get all variables 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <returns>ApiResponse of Variables</returns>
        public ApiResponse< Variables > VariablesGetWithHttpInfo (string zapTraceSpan = null, string org = null, string orgID = null)
        {

            var localVarPath = "/api/v2/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (org != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            if (orgID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variables>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Variables) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variables)));
        }

        /// <summary>
        /// get all variables 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <returns>Task of Variables</returns>
        public async System.Threading.Tasks.Task<Variables> VariablesGetAsync (string zapTraceSpan = null, string org = null, string orgID = null)
        {
             ApiResponse<Variables> localVarResponse = await VariablesGetAsyncWithHttpInfo(zapTraceSpan, org, orgID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get all variables 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="org">specifies the organization name of the resource (optional)</param>
        /// <param name="orgID">specifies the organization id of the resource (optional)</param>
        /// <returns>Task of ApiResponse (Variables)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Variables>> VariablesGetAsyncWithHttpInfo (string zapTraceSpan = null, string org = null, string orgID = null)
        {

            var localVarPath = "/api/v2/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (org != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            if (orgID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variables>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Variables) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variables)));
        }

        /// <summary>
        /// create a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variable">variable to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Variable</returns>
        public Variable VariablesPost (Variable variable, string zapTraceSpan = null)
        {
             ApiResponse<Variable> localVarResponse = VariablesPostWithHttpInfo(variable, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variable">variable to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Variable</returns>
        public ApiResponse< Variable > VariablesPostWithHttpInfo (Variable variable, string zapTraceSpan = null)
        {
            // verify the required parameter 'variable' is set
            if (variable == null)
                throw new ApiException(400, "Missing required parameter 'variable' when calling VariablesService->VariablesPost");

            var localVarPath = "/api/v2/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (variable != null && variable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(variable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = variable; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Variable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variable)));
        }

        /// <summary>
        /// create a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variable">variable to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Variable</returns>
        public async System.Threading.Tasks.Task<Variable> VariablesPostAsync (Variable variable, string zapTraceSpan = null)
        {
             ApiResponse<Variable> localVarResponse = await VariablesPostAsyncWithHttpInfo(variable, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variable">variable to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Variable>> VariablesPostAsyncWithHttpInfo (Variable variable, string zapTraceSpan = null)
        {
            // verify the required parameter 'variable' is set
            if (variable == null)
                throw new ApiException(400, "Missing required parameter 'variable' when calling VariablesService->VariablesPost");

            var localVarPath = "/api/v2/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (variable != null && variable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(variable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = variable; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Variable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variable)));
        }

        /// <summary>
        /// delete a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void VariablesVariableIDDelete (string variableID, string zapTraceSpan = null)
        {
             VariablesVariableIDDeleteWithHttpInfo(variableID, zapTraceSpan);
        }

        /// <summary>
        /// delete a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VariablesVariableIDDeleteWithHttpInfo (string variableID, string zapTraceSpan = null)
        {
            // verify the required parameter 'variableID' is set
            if (variableID == null)
                throw new ApiException(400, "Missing required parameter 'variableID' when calling VariablesService->VariablesVariableIDDelete");

            var localVarPath = "/api/v2/variables/{variableID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableID != null) localVarPathParams.Add("variableID", this.Configuration.ApiClient.ParameterToString(variableID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesVariableIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// delete a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VariablesVariableIDDeleteAsync (string variableID, string zapTraceSpan = null)
        {
             await VariablesVariableIDDeleteAsyncWithHttpInfo(variableID, zapTraceSpan);

        }

        /// <summary>
        /// delete a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VariablesVariableIDDeleteAsyncWithHttpInfo (string variableID, string zapTraceSpan = null)
        {
            // verify the required parameter 'variableID' is set
            if (variableID == null)
                throw new ApiException(400, "Missing required parameter 'variableID' when calling VariablesService->VariablesVariableIDDelete");

            var localVarPath = "/api/v2/variables/{variableID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableID != null) localVarPathParams.Add("variableID", this.Configuration.ApiClient.ParameterToString(variableID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesVariableIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// get a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Variable</returns>
        public Variable VariablesVariableIDGet (string variableID, string zapTraceSpan = null)
        {
             ApiResponse<Variable> localVarResponse = VariablesVariableIDGetWithHttpInfo(variableID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Variable</returns>
        public ApiResponse< Variable > VariablesVariableIDGetWithHttpInfo (string variableID, string zapTraceSpan = null)
        {
            // verify the required parameter 'variableID' is set
            if (variableID == null)
                throw new ApiException(400, "Missing required parameter 'variableID' when calling VariablesService->VariablesVariableIDGet");

            var localVarPath = "/api/v2/variables/{variableID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableID != null) localVarPathParams.Add("variableID", this.Configuration.ApiClient.ParameterToString(variableID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesVariableIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Variable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variable)));
        }

        /// <summary>
        /// get a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Variable</returns>
        public async System.Threading.Tasks.Task<Variable> VariablesVariableIDGetAsync (string variableID, string zapTraceSpan = null)
        {
             ApiResponse<Variable> localVarResponse = await VariablesVariableIDGetAsyncWithHttpInfo(variableID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Variable>> VariablesVariableIDGetAsyncWithHttpInfo (string variableID, string zapTraceSpan = null)
        {
            // verify the required parameter 'variableID' is set
            if (variableID == null)
                throw new ApiException(400, "Missing required parameter 'variableID' when calling VariablesService->VariablesVariableIDGet");

            var localVarPath = "/api/v2/variables/{variableID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableID != null) localVarPathParams.Add("variableID", this.Configuration.ApiClient.ParameterToString(variableID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesVariableIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Variable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variable)));
        }

        /// <summary>
        /// list all labels for a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelsResponse</returns>
        public LabelsResponse VariablesVariableIDLabelsGet (string variableID, string zapTraceSpan = null)
        {
             ApiResponse<LabelsResponse> localVarResponse = VariablesVariableIDLabelsGetWithHttpInfo(variableID, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// list all labels for a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelsResponse</returns>
        public ApiResponse< LabelsResponse > VariablesVariableIDLabelsGetWithHttpInfo (string variableID, string zapTraceSpan = null)
        {
            // verify the required parameter 'variableID' is set
            if (variableID == null)
                throw new ApiException(400, "Missing required parameter 'variableID' when calling VariablesService->VariablesVariableIDLabelsGet");

            var localVarPath = "/api/v2/variables/{variableID}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableID != null) localVarPathParams.Add("variableID", this.Configuration.ApiClient.ParameterToString(variableID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesVariableIDLabelsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelsResponse)));
        }

        /// <summary>
        /// list all labels for a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of LabelsResponse</returns>
        public async System.Threading.Tasks.Task<LabelsResponse> VariablesVariableIDLabelsGetAsync (string variableID, string zapTraceSpan = null)
        {
             ApiResponse<LabelsResponse> localVarResponse = await VariablesVariableIDLabelsGetAsyncWithHttpInfo(variableID, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// list all labels for a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (LabelsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LabelsResponse>> VariablesVariableIDLabelsGetAsyncWithHttpInfo (string variableID, string zapTraceSpan = null)
        {
            // verify the required parameter 'variableID' is set
            if (variableID == null)
                throw new ApiException(400, "Missing required parameter 'variableID' when calling VariablesService->VariablesVariableIDLabelsGet");

            var localVarPath = "/api/v2/variables/{variableID}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableID != null) localVarPathParams.Add("variableID", this.Configuration.ApiClient.ParameterToString(variableID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesVariableIDLabelsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelsResponse)));
        }

        /// <summary>
        /// delete a label from a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void VariablesVariableIDLabelsLabelIDDelete (string variableID, string labelID, string zapTraceSpan = null)
        {
             VariablesVariableIDLabelsLabelIDDeleteWithHttpInfo(variableID, labelID, zapTraceSpan);
        }

        /// <summary>
        /// delete a label from a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VariablesVariableIDLabelsLabelIDDeleteWithHttpInfo (string variableID, string labelID, string zapTraceSpan = null)
        {
            // verify the required parameter 'variableID' is set
            if (variableID == null)
                throw new ApiException(400, "Missing required parameter 'variableID' when calling VariablesService->VariablesVariableIDLabelsLabelIDDelete");
            // verify the required parameter 'labelID' is set
            if (labelID == null)
                throw new ApiException(400, "Missing required parameter 'labelID' when calling VariablesService->VariablesVariableIDLabelsLabelIDDelete");

            var localVarPath = "/api/v2/variables/{variableID}/labels/{labelID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableID != null) localVarPathParams.Add("variableID", this.Configuration.ApiClient.ParameterToString(variableID)); // path parameter
            if (labelID != null) localVarPathParams.Add("labelID", this.Configuration.ApiClient.ParameterToString(labelID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesVariableIDLabelsLabelIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// delete a label from a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VariablesVariableIDLabelsLabelIDDeleteAsync (string variableID, string labelID, string zapTraceSpan = null)
        {
             await VariablesVariableIDLabelsLabelIDDeleteAsyncWithHttpInfo(variableID, labelID, zapTraceSpan);

        }

        /// <summary>
        /// delete a label from a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelID">the label id to delete</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VariablesVariableIDLabelsLabelIDDeleteAsyncWithHttpInfo (string variableID, string labelID, string zapTraceSpan = null)
        {
            // verify the required parameter 'variableID' is set
            if (variableID == null)
                throw new ApiException(400, "Missing required parameter 'variableID' when calling VariablesService->VariablesVariableIDLabelsLabelIDDelete");
            // verify the required parameter 'labelID' is set
            if (labelID == null)
                throw new ApiException(400, "Missing required parameter 'labelID' when calling VariablesService->VariablesVariableIDLabelsLabelIDDelete");

            var localVarPath = "/api/v2/variables/{variableID}/labels/{labelID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableID != null) localVarPathParams.Add("variableID", this.Configuration.ApiClient.ParameterToString(variableID)); // path parameter
            if (labelID != null) localVarPathParams.Add("labelID", this.Configuration.ApiClient.ParameterToString(labelID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesVariableIDLabelsLabelIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// add a label to a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelResponse</returns>
        public LabelResponse VariablesVariableIDLabelsPost (string variableID, LabelMapping labelMapping, string zapTraceSpan = null)
        {
             ApiResponse<LabelResponse> localVarResponse = VariablesVariableIDLabelsPostWithHttpInfo(variableID, labelMapping, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// add a label to a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        public ApiResponse< LabelResponse > VariablesVariableIDLabelsPostWithHttpInfo (string variableID, LabelMapping labelMapping, string zapTraceSpan = null)
        {
            // verify the required parameter 'variableID' is set
            if (variableID == null)
                throw new ApiException(400, "Missing required parameter 'variableID' when calling VariablesService->VariablesVariableIDLabelsPost");
            // verify the required parameter 'labelMapping' is set
            if (labelMapping == null)
                throw new ApiException(400, "Missing required parameter 'labelMapping' when calling VariablesService->VariablesVariableIDLabelsPost");

            var localVarPath = "/api/v2/variables/{variableID}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableID != null) localVarPathParams.Add("variableID", this.Configuration.ApiClient.ParameterToString(variableID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (labelMapping != null && labelMapping.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(labelMapping); // http body (model) parameter
            }
            else
            {
                localVarPostBody = labelMapping; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesVariableIDLabelsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelResponse)));
        }

        /// <summary>
        /// add a label to a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of LabelResponse</returns>
        public async System.Threading.Tasks.Task<LabelResponse> VariablesVariableIDLabelsPostAsync (string variableID, LabelMapping labelMapping, string zapTraceSpan = null)
        {
             ApiResponse<LabelResponse> localVarResponse = await VariablesVariableIDLabelsPostAsyncWithHttpInfo(variableID, labelMapping, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// add a label to a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">ID of the variable</param>
        /// <param name="labelMapping">label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LabelResponse>> VariablesVariableIDLabelsPostAsyncWithHttpInfo (string variableID, LabelMapping labelMapping, string zapTraceSpan = null)
        {
            // verify the required parameter 'variableID' is set
            if (variableID == null)
                throw new ApiException(400, "Missing required parameter 'variableID' when calling VariablesService->VariablesVariableIDLabelsPost");
            // verify the required parameter 'labelMapping' is set
            if (labelMapping == null)
                throw new ApiException(400, "Missing required parameter 'labelMapping' when calling VariablesService->VariablesVariableIDLabelsPost");

            var localVarPath = "/api/v2/variables/{variableID}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableID != null) localVarPathParams.Add("variableID", this.Configuration.ApiClient.ParameterToString(variableID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (labelMapping != null && labelMapping.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(labelMapping); // http body (model) parameter
            }
            else
            {
                localVarPostBody = labelMapping; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesVariableIDLabelsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelResponse)));
        }

        /// <summary>
        /// update a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Variable</returns>
        public Variable VariablesVariableIDPatch (string variableID, Variable variable, string zapTraceSpan = null)
        {
             ApiResponse<Variable> localVarResponse = VariablesVariableIDPatchWithHttpInfo(variableID, variable, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// update a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Variable</returns>
        public ApiResponse< Variable > VariablesVariableIDPatchWithHttpInfo (string variableID, Variable variable, string zapTraceSpan = null)
        {
            // verify the required parameter 'variableID' is set
            if (variableID == null)
                throw new ApiException(400, "Missing required parameter 'variableID' when calling VariablesService->VariablesVariableIDPatch");
            // verify the required parameter 'variable' is set
            if (variable == null)
                throw new ApiException(400, "Missing required parameter 'variable' when calling VariablesService->VariablesVariableIDPatch");

            var localVarPath = "/api/v2/variables/{variableID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableID != null) localVarPathParams.Add("variableID", this.Configuration.ApiClient.ParameterToString(variableID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (variable != null && variable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(variable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = variable; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesVariableIDPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Variable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variable)));
        }

        /// <summary>
        /// update a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Variable</returns>
        public async System.Threading.Tasks.Task<Variable> VariablesVariableIDPatchAsync (string variableID, Variable variable, string zapTraceSpan = null)
        {
             ApiResponse<Variable> localVarResponse = await VariablesVariableIDPatchAsyncWithHttpInfo(variableID, variable, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Variable>> VariablesVariableIDPatchAsyncWithHttpInfo (string variableID, Variable variable, string zapTraceSpan = null)
        {
            // verify the required parameter 'variableID' is set
            if (variableID == null)
                throw new ApiException(400, "Missing required parameter 'variableID' when calling VariablesService->VariablesVariableIDPatch");
            // verify the required parameter 'variable' is set
            if (variable == null)
                throw new ApiException(400, "Missing required parameter 'variable' when calling VariablesService->VariablesVariableIDPatch");

            var localVarPath = "/api/v2/variables/{variableID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableID != null) localVarPathParams.Add("variableID", this.Configuration.ApiClient.ParameterToString(variableID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (variable != null && variable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(variable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = variable; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesVariableIDPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Variable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variable)));
        }

        /// <summary>
        /// replace a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable to replace</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Variable</returns>
        public Variable VariablesVariableIDPut (string variableID, Variable variable, string zapTraceSpan = null)
        {
             ApiResponse<Variable> localVarResponse = VariablesVariableIDPutWithHttpInfo(variableID, variable, zapTraceSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// replace a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable to replace</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Variable</returns>
        public ApiResponse< Variable > VariablesVariableIDPutWithHttpInfo (string variableID, Variable variable, string zapTraceSpan = null)
        {
            // verify the required parameter 'variableID' is set
            if (variableID == null)
                throw new ApiException(400, "Missing required parameter 'variableID' when calling VariablesService->VariablesVariableIDPut");
            // verify the required parameter 'variable' is set
            if (variable == null)
                throw new ApiException(400, "Missing required parameter 'variable' when calling VariablesService->VariablesVariableIDPut");

            var localVarPath = "/api/v2/variables/{variableID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableID != null) localVarPathParams.Add("variableID", this.Configuration.ApiClient.ParameterToString(variableID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (variable != null && variable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(variable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = variable; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesVariableIDPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Variable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variable)));
        }

        /// <summary>
        /// replace a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable to replace</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of Variable</returns>
        public async System.Threading.Tasks.Task<Variable> VariablesVariableIDPutAsync (string variableID, Variable variable, string zapTraceSpan = null)
        {
             ApiResponse<Variable> localVarResponse = await VariablesVariableIDPutAsyncWithHttpInfo(variableID, variable, zapTraceSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// replace a variable 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableID">id of the variable</param>
        /// <param name="variable">variable to replace</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Variable>> VariablesVariableIDPutAsyncWithHttpInfo (string variableID, Variable variable, string zapTraceSpan = null)
        {
            // verify the required parameter 'variableID' is set
            if (variableID == null)
                throw new ApiException(400, "Missing required parameter 'variableID' when calling VariablesService->VariablesVariableIDPut");
            // verify the required parameter 'variable' is set
            if (variable == null)
                throw new ApiException(400, "Missing required parameter 'variable' when calling VariablesService->VariablesVariableIDPut");

            var localVarPath = "/api/v2/variables/{variableID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableID != null) localVarPathParams.Add("variableID", this.Configuration.ApiClient.ParameterToString(variableID)); // path parameter
            if (zapTraceSpan != null) localVarHeaderParams.Add("Zap-Trace-Span", this.Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            if (variable != null && variable.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(variable); // http body (model) parameter
            }
            else
            {
                localVarPostBody = variable; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariablesVariableIDPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Variable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variable)));
        }

    }
}
