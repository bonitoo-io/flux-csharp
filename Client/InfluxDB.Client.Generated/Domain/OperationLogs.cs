/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = InfluxDB.Client.Generated.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Generated.Domain
{
    /// <summary>
    /// OperationLogs
    /// </summary>
    [DataContract]
    public partial class OperationLogs :  IEquatable<OperationLogs>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationLogs" /> class.
        /// </summary>
        /// <param name="logs">logs.</param>
        /// <param name="links">links.</param>
        public OperationLogs(List<OperationLog> logs = default(List<OperationLog>), Links links = default(Links))
        {
            this.Logs = logs;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets Logs
        /// </summary>
        [DataMember(Name="logs", EmitDefaultValue=false)]
        public List<OperationLog> Logs { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public Links Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperationLogs {\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperationLogs);
        }

        /// <summary>
        /// Returns true if OperationLogs instances are equal
        /// </summary>
        /// <param name="input">Instance of OperationLogs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationLogs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Logs == input.Logs ||
                    this.Logs != null &&
                    this.Logs.SequenceEqual(input.Logs)
                ) && 
                (
                    
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Logs != null)
                    hashCode = hashCode * 59 + this.Logs.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

    }

}
