/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = InfluxDB.Client.Generated.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Generated.Domain
{
    /// <summary>
    /// DashboardQuery
    /// </summary>
    [DataContract]
    public partial class DashboardQuery :  IEquatable<DashboardQuery>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardQuery" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DashboardQuery() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardQuery" /> class.
        /// </summary>
        /// <param name="label">Optional Y-axis user-facing label.</param>
        /// <param name="range">range.</param>
        /// <param name="query">query (required).</param>
        /// <param name="source">Optional URI for data source for this query.</param>
        /// <param name="queryConfig">queryConfig.</param>
        public DashboardQuery(string label = default(string), DashboardQueryRange range = default(DashboardQueryRange), string query = default(string), string source = default(string), QueryConfig queryConfig = default(QueryConfig))
        {
            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new InvalidDataException("query is a required property for DashboardQuery and cannot be null");
            }
            else
            {
                this.Query = query;
            }
            this.Label = label;
            this.Range = range;
            this.Source = source;
            this.QueryConfig = queryConfig;
        }

        /// <summary>
        /// Optional Y-axis user-facing label
        /// </summary>
        /// <value>Optional Y-axis user-facing label</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        [DataMember(Name="range", EmitDefaultValue=false)]
        public DashboardQueryRange Range { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public string Query { get; set; }

        /// <summary>
        /// Optional URI for data source for this query
        /// </summary>
        /// <value>Optional URI for data source for this query</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets QueryConfig
        /// </summary>
        [DataMember(Name="queryConfig", EmitDefaultValue=false)]
        public QueryConfig QueryConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DashboardQuery {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  QueryConfig: ").Append(QueryConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DashboardQuery);
        }

        /// <summary>
        /// Returns true if DashboardQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of DashboardQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DashboardQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    
                    (this.QueryConfig != null &&
                    this.QueryConfig.Equals(input.QueryConfig))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Range != null)
                    hashCode = hashCode * 59 + this.Range.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.QueryConfig != null)
                    hashCode = hashCode * 59 + this.QueryConfig.GetHashCode();
                return hashCode;
            }
        }

    }

}
