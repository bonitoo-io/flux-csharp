/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = InfluxDB.Client.Generated.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Generated.Domain
{
    /// <summary>
    /// TelegrafRequest
    /// </summary>
    [DataContract]
    public partial class TelegrafRequest :  IEquatable<TelegrafRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TelegrafRequest" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="agent">agent.</param>
        /// <param name="plugins">plugins.</param>
        /// <param name="organizationID">organizationID.</param>
        public TelegrafRequest(string name = default(string), string description = default(string), TelegrafRequestAgent agent = default(TelegrafRequestAgent), List<TelegrafRequestPlugin> plugins = default(List<TelegrafRequestPlugin>), string organizationID = default(string))
        {
            this.Name = name;
            this.Description = description;
            this.Agent = agent;
            this.Plugins = plugins;
            this.OrganizationID = organizationID;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Agent
        /// </summary>
        [DataMember(Name="agent", EmitDefaultValue=false)]
        public TelegrafRequestAgent Agent { get; set; }

        /// <summary>
        /// Gets or Sets Plugins
        /// </summary>
        [DataMember(Name="plugins", EmitDefaultValue=false)]
        [JsonConverter(typeof(TelegrafRequestPluginsAdapter))]
        public List<TelegrafRequestPlugin> Plugins { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationID
        /// </summary>
        [DataMember(Name="organizationID", EmitDefaultValue=false)]
        public string OrganizationID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TelegrafRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Agent: ").Append(Agent).Append("\n");
            sb.Append("  Plugins: ").Append(Plugins).Append("\n");
            sb.Append("  OrganizationID: ").Append(OrganizationID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TelegrafRequest);
        }

        /// <summary>
        /// Returns true if TelegrafRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TelegrafRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TelegrafRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    
                    (this.Agent != null &&
                    this.Agent.Equals(input.Agent))
                ) && 
                (
                    this.Plugins == input.Plugins ||
                    this.Plugins != null &&
                    this.Plugins.SequenceEqual(input.Plugins)
                ) && 
                (
                    this.OrganizationID == input.OrganizationID ||
                    (this.OrganizationID != null &&
                    this.OrganizationID.Equals(input.OrganizationID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Agent != null)
                    hashCode = hashCode * 59 + this.Agent.GetHashCode();
                if (this.Plugins != null)
                    hashCode = hashCode * 59 + this.Plugins.GetHashCode();
                if (this.OrganizationID != null)
                    hashCode = hashCode * 59 + this.OrganizationID.GetHashCode();
                return hashCode;
            }
        }

    public class TelegrafRequestPluginsAdapter : JsonConverter
    {
        private static readonly Dictionary<string[], Type> Types = new Dictionary<string[], Type>(new Client.DiscriminatorComparer<string>())
        {
            {new []{ "cpu", "input" }, typeof(TelegrafPluginInputCpu)},
            {new []{ "disk", "input" }, typeof(TelegrafPluginInputDisk)},
            {new []{ "diskio", "input" }, typeof(TelegrafPluginInputDiskio)},
            {new []{ "docker", "input" }, typeof(TelegrafPluginInputDocker)},
            {new []{ "file", "input" }, typeof(TelegrafPluginInputFile)},
            {new []{ "kubernetes", "input" }, typeof(TelegrafPluginInputKubernetes)},
            {new []{ "logparser", "input" }, typeof(TelegrafPluginInputLogParser)},
            {new []{ "procstat", "input" }, typeof(TelegrafPluginInputProcstat)},
            {new []{ "prometheus", "input" }, typeof(TelegrafPluginInputPrometheus)},
            {new []{ "redis", "input" }, typeof(TelegrafPluginInputRedis)},
            {new []{ "syslog", "input" }, typeof(TelegrafPluginInputSyslog)},
            {new []{ "file", "output" }, typeof(TelegrafPluginOutputFile)},
            {new []{ "influxdb_v2", "output" }, typeof(TelegrafPluginOutputInfluxDBV2)},
        };

        public override bool CanConvert(Type objectType)
        {
            return false;
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            serializer.Serialize(writer, value);
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            return Deserialize(reader, objectType, serializer);
        }

        private object Deserialize(JsonReader reader, Type objectType, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:

                    var jObject = Newtonsoft.Json.Linq.JObject.Load(reader);

                    var discriminator = new []{ "name", "type" }.Select(key => jObject[key].ToString()).ToArray();

                    var type = Types.GetValueOrDefault(discriminator, objectType);

                    return serializer.Deserialize(jObject.CreateReader(), type);

                case JsonToken.StartArray:
                    return DeserializeArray(reader, objectType, serializer);

                default:
                    return serializer.Deserialize(reader, objectType);
            }
        }

        private IList DeserializeArray(JsonReader reader, Type targetType, JsonSerializer serializer)
        {
            var elementType = targetType.GenericTypeArguments.FirstOrDefault();

            var list = (IList) Activator.CreateInstance(targetType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
            {
                list.Add(Deserialize(reader, elementType, serializer));
            }

            return list;
        }
    }
    }

}
