/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = InfluxDB.Client.Generated.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Generated.Domain
{
    /// <summary>
    /// QuerySpecificationSpec
    /// </summary>
    [DataContract]
    public partial class QuerySpecificationSpec :  IEquatable<QuerySpecificationSpec>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuerySpecificationSpec" /> class.
        /// </summary>
        /// <param name="operations">operations.</param>
        /// <param name="edges">list of declaring a parent child id relationship between operations.</param>
        /// <param name="resources">resources.</param>
        /// <param name="dialect">dialect.</param>
        public QuerySpecificationSpec(List<QuerySpecificationSpecOperations> operations = default(List<QuerySpecificationSpecOperations>), List<QuerySpecificationSpecEdges> edges = default(List<QuerySpecificationSpecEdges>), QuerySpecificationSpecResources resources = default(QuerySpecificationSpecResources), Dialect dialect = default(Dialect))
        {
            this.Operations = operations;
            this.Edges = edges;
            this.Resources = resources;
            this.Dialect = dialect;
        }

        /// <summary>
        /// Gets or Sets Operations
        /// </summary>
        [DataMember(Name="operations", EmitDefaultValue=false)]
        public List<QuerySpecificationSpecOperations> Operations { get; set; }

        /// <summary>
        /// list of declaring a parent child id relationship between operations
        /// </summary>
        /// <value>list of declaring a parent child id relationship between operations</value>
        [DataMember(Name="edges", EmitDefaultValue=false)]
        public List<QuerySpecificationSpecEdges> Edges { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public QuerySpecificationSpecResources Resources { get; set; }

        /// <summary>
        /// Gets or Sets Dialect
        /// </summary>
        [DataMember(Name="dialect", EmitDefaultValue=false)]
        public Dialect Dialect { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuerySpecificationSpec {\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("  Edges: ").Append(Edges).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Dialect: ").Append(Dialect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuerySpecificationSpec);
        }

        /// <summary>
        /// Returns true if QuerySpecificationSpec instances are equal
        /// </summary>
        /// <param name="input">Instance of QuerySpecificationSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuerySpecificationSpec input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Operations == input.Operations ||
                    this.Operations != null &&
                    this.Operations.SequenceEqual(input.Operations)
                ) && 
                (
                    this.Edges == input.Edges ||
                    this.Edges != null &&
                    this.Edges.SequenceEqual(input.Edges)
                ) && 
                (
                    
                    (this.Resources != null &&
                    this.Resources.Equals(input.Resources))
                ) && 
                (
                    
                    (this.Dialect != null &&
                    this.Dialect.Equals(input.Dialect))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Operations != null)
                    hashCode = hashCode * 59 + this.Operations.GetHashCode();
                if (this.Edges != null)
                    hashCode = hashCode * 59 + this.Edges.GetHashCode();
                if (this.Resources != null)
                    hashCode = hashCode * 59 + this.Resources.GetHashCode();
                if (this.Dialect != null)
                    hashCode = hashCode * 59 + this.Dialect.GetHashCode();
                return hashCode;
            }
        }

    }

}
