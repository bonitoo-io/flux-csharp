/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// V1ViewProperties
    /// </summary>
    [DataContract]
    public partial class V1ViewProperties :  IEquatable<V1ViewProperties>
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum ChronografV1 for value: chronograf-v1
            /// </summary>
            [EnumMember(Value = "chronograf-v1")]
            ChronografV1 = 1
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// The viewport for a view&#39;s graph/visualization
        /// </summary>
        /// <value>The viewport for a view&#39;s graph/visualization</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GraphTypeEnum
        {
            
            /// <summary>
            /// Enum SingleStat for value: single-stat
            /// </summary>
            [EnumMember(Value = "single-stat")]
            SingleStat = 1,
            
            /// <summary>
            /// Enum Line for value: line
            /// </summary>
            [EnumMember(Value = "line")]
            Line = 2,
            
            /// <summary>
            /// Enum LinePlusSingleStat for value: line-plus-single-stat
            /// </summary>
            [EnumMember(Value = "line-plus-single-stat")]
            LinePlusSingleStat = 3,
            
            /// <summary>
            /// Enum LineStacked for value: line-stacked
            /// </summary>
            [EnumMember(Value = "line-stacked")]
            LineStacked = 4,
            
            /// <summary>
            /// Enum LineStepplot for value: line-stepplot
            /// </summary>
            [EnumMember(Value = "line-stepplot")]
            LineStepplot = 5,
            
            /// <summary>
            /// Enum Bar for value: bar
            /// </summary>
            [EnumMember(Value = "bar")]
            Bar = 6,
            
            /// <summary>
            /// Enum Gauge for value: gauge
            /// </summary>
            [EnumMember(Value = "gauge")]
            Gauge = 7,
            
            /// <summary>
            /// Enum Table for value: table
            /// </summary>
            [EnumMember(Value = "table")]
            Table = 8
        }

        /// <summary>
        /// The viewport for a view&#39;s graph/visualization
        /// </summary>
        /// <value>The viewport for a view&#39;s graph/visualization</value>
        [DataMember(Name="graphType", EmitDefaultValue=false)]
        public GraphTypeEnum? GraphType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1ViewProperties" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="queries">queries.</param>
        /// <param name="axes">axes.</param>
        /// <param name="graphType">The viewport for a view&#39;s graph/visualization (default to GraphTypeEnum.Line).</param>
        /// <param name="colors">Colors define color encoding of data into a visualization.</param>
        /// <param name="legend">legend.</param>
        /// <param name="tableOptions">tableOptions.</param>
        /// <param name="fieldOptions">fieldOptions represent the fields retrieved by the query with customization options.</param>
        /// <param name="timeFormat">timeFormat describes the display format for time values according to moment.js date formatting.</param>
        /// <param name="decimalPoints">decimalPoints.</param>
        public V1ViewProperties(TypeEnum? type = default(TypeEnum?), List<DashboardQuery> queries = default(List<DashboardQuery>), V1ViewPropertiesAxes axes = default(V1ViewPropertiesAxes), GraphTypeEnum? graphType = GraphTypeEnum.Line, List<DashboardColor> colors = default(List<DashboardColor>), V1ViewPropertiesLegend legend = default(V1ViewPropertiesLegend), Object tableOptions = default(Object), List<RenamableField> fieldOptions = default(List<RenamableField>), string timeFormat = default(string), V1ViewPropertiesDecimalPoints decimalPoints = default(V1ViewPropertiesDecimalPoints))
        {
            this.Type = type;
            this.Queries = queries;
            this.Axes = axes;
            // use default value if no "graphType" provided
            if (graphType == null)
            {
                this.GraphType = GraphTypeEnum.Line;
            }
            else
            {
                this.GraphType = graphType;
            }
            this.Colors = colors;
            this.Legend = legend;
            this.TableOptions = tableOptions;
            this.FieldOptions = fieldOptions;
            this.TimeFormat = timeFormat;
            this.DecimalPoints = decimalPoints;
        }


        /// <summary>
        /// Gets or Sets Queries
        /// </summary>
        [DataMember(Name="queries", EmitDefaultValue=false)]
        public List<DashboardQuery> Queries { get; set; }

        /// <summary>
        /// Gets or Sets Axes
        /// </summary>
        [DataMember(Name="axes", EmitDefaultValue=false)]
        public V1ViewPropertiesAxes Axes { get; set; }


        /// <summary>
        /// Colors define color encoding of data into a visualization
        /// </summary>
        /// <value>Colors define color encoding of data into a visualization</value>
        [DataMember(Name="colors", EmitDefaultValue=false)]
        public List<DashboardColor> Colors { get; set; }

        /// <summary>
        /// Gets or Sets Legend
        /// </summary>
        [DataMember(Name="legend", EmitDefaultValue=false)]
        public V1ViewPropertiesLegend Legend { get; set; }

        /// <summary>
        /// Gets or Sets TableOptions
        /// </summary>
        [DataMember(Name="tableOptions", EmitDefaultValue=false)]
        public Object TableOptions { get; set; }

        /// <summary>
        /// fieldOptions represent the fields retrieved by the query with customization options
        /// </summary>
        /// <value>fieldOptions represent the fields retrieved by the query with customization options</value>
        [DataMember(Name="fieldOptions", EmitDefaultValue=false)]
        public List<RenamableField> FieldOptions { get; set; }

        /// <summary>
        /// timeFormat describes the display format for time values according to moment.js date formatting
        /// </summary>
        /// <value>timeFormat describes the display format for time values according to moment.js date formatting</value>
        [DataMember(Name="timeFormat", EmitDefaultValue=false)]
        public string TimeFormat { get; set; }

        /// <summary>
        /// Gets or Sets DecimalPoints
        /// </summary>
        [DataMember(Name="decimalPoints", EmitDefaultValue=false)]
        public V1ViewPropertiesDecimalPoints DecimalPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1ViewProperties {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Queries: ").Append(Queries).Append("\n");
            sb.Append("  Axes: ").Append(Axes).Append("\n");
            sb.Append("  GraphType: ").Append(GraphType).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("  Legend: ").Append(Legend).Append("\n");
            sb.Append("  TableOptions: ").Append(TableOptions).Append("\n");
            sb.Append("  FieldOptions: ").Append(FieldOptions).Append("\n");
            sb.Append("  TimeFormat: ").Append(TimeFormat).Append("\n");
            sb.Append("  DecimalPoints: ").Append(DecimalPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V1ViewProperties);
        }

        /// <summary>
        /// Returns true if V1ViewProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of V1ViewProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1ViewProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Queries == input.Queries ||
                    this.Queries != null &&
                    this.Queries.SequenceEqual(input.Queries)
                ) && 
                (
                    
                    (this.Axes != null &&
                    this.Axes.Equals(input.Axes))
                ) && 
                (
                    this.GraphType == input.GraphType ||
                    (this.GraphType != null &&
                    this.GraphType.Equals(input.GraphType))
                ) && 
                (
                    this.Colors == input.Colors ||
                    this.Colors != null &&
                    this.Colors.SequenceEqual(input.Colors)
                ) && 
                (
                    
                    (this.Legend != null &&
                    this.Legend.Equals(input.Legend))
                ) && 
                (
                    this.TableOptions == input.TableOptions ||
                    (this.TableOptions != null &&
                    this.TableOptions.Equals(input.TableOptions))
                ) && 
                (
                    this.FieldOptions == input.FieldOptions ||
                    this.FieldOptions != null &&
                    this.FieldOptions.SequenceEqual(input.FieldOptions)
                ) && 
                (
                    this.TimeFormat == input.TimeFormat ||
                    (this.TimeFormat != null &&
                    this.TimeFormat.Equals(input.TimeFormat))
                ) && 
                (
                    
                    (this.DecimalPoints != null &&
                    this.DecimalPoints.Equals(input.DecimalPoints))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Queries != null)
                    hashCode = hashCode * 59 + this.Queries.GetHashCode();
                if (this.Axes != null)
                    hashCode = hashCode * 59 + this.Axes.GetHashCode();
                if (this.GraphType != null)
                    hashCode = hashCode * 59 + this.GraphType.GetHashCode();
                if (this.Colors != null)
                    hashCode = hashCode * 59 + this.Colors.GetHashCode();
                if (this.Legend != null)
                    hashCode = hashCode * 59 + this.Legend.GetHashCode();
                if (this.TableOptions != null)
                    hashCode = hashCode * 59 + this.TableOptions.GetHashCode();
                if (this.FieldOptions != null)
                    hashCode = hashCode * 59 + this.FieldOptions.GetHashCode();
                if (this.TimeFormat != null)
                    hashCode = hashCode * 59 + this.TimeFormat.GetHashCode();
                if (this.DecimalPoints != null)
                    hashCode = hashCode * 59 + this.DecimalPoints.GetHashCode();
                return hashCode;
            }
        }

    }

}
