/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// Contains a specific column&#39;s settings.
    /// </summary>
    [DataContract]
    public partial class LogViewerColumn :  IEquatable<LogViewerColumn>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogViewerColumn" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LogViewerColumn() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogViewerColumn" /> class.
        /// </summary>
        /// <param name="name">Unique identifier name of the column (required).</param>
        /// <param name="position">position (required).</param>
        /// <param name="settings">Composable settings options for the column (required).</param>
        public LogViewerColumn(string name = default(string), int? position = default(int?), List<LogViewerColumnSettings> settings = default(List<LogViewerColumnSettings>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for LogViewerColumn and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new InvalidDataException("position is a required property for LogViewerColumn and cannot be null");
            }
            else
            {
                this.Position = position;
            }
            // to ensure "settings" is required (not null)
            if (settings == null)
            {
                throw new InvalidDataException("settings is a required property for LogViewerColumn and cannot be null");
            }
            else
            {
                this.Settings = settings;
            }
        }

        /// <summary>
        /// Unique identifier name of the column
        /// </summary>
        /// <value>Unique identifier name of the column</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// Composable settings options for the column
        /// </summary>
        /// <value>Composable settings options for the column</value>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public List<LogViewerColumnSettings> Settings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogViewerColumn {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogViewerColumn);
        }

        /// <summary>
        /// Returns true if LogViewerColumn instances are equal
        /// </summary>
        /// <param name="input">Instance of LogViewerColumn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogViewerColumn input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Settings == input.Settings ||
                    this.Settings != null &&
                    this.Settings.SequenceEqual(input.Settings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                return hashCode;
            }
        }

    }

}
