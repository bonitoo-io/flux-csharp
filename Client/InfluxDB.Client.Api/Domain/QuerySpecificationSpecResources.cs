/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// optional set of contraints on the resources the query can consume
    /// </summary>
    [DataContract]
    public partial class QuerySpecificationSpecResources :  IEquatable<QuerySpecificationSpecResources>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuerySpecificationSpecResources" /> class.
        /// </summary>
        /// <param name="priority">priority of the query.</param>
        /// <param name="concurrencyQuota">number of concurrent workers allowed to process this query; 0 indicates the planner can pick the optimal concurrency. (default to 0).</param>
        /// <param name="memoryBytesQuota">number of bytes of RAM this query may consume; 0 means unlimited. (default to 0).</param>
        public QuerySpecificationSpecResources(Object priority = default(Object), int? concurrencyQuota = 0, int? memoryBytesQuota = 0)
        {
            this.Priority = priority;
            // use default value if no "concurrencyQuota" provided
            if (concurrencyQuota == null)
            {
                this.ConcurrencyQuota = 0;
            }
            else
            {
                this.ConcurrencyQuota = concurrencyQuota;
            }
            // use default value if no "memoryBytesQuota" provided
            if (memoryBytesQuota == null)
            {
                this.MemoryBytesQuota = 0;
            }
            else
            {
                this.MemoryBytesQuota = memoryBytesQuota;
            }
        }

        /// <summary>
        /// priority of the query
        /// </summary>
        /// <value>priority of the query</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public Object Priority { get; set; }

        /// <summary>
        /// number of concurrent workers allowed to process this query; 0 indicates the planner can pick the optimal concurrency.
        /// </summary>
        /// <value>number of concurrent workers allowed to process this query; 0 indicates the planner can pick the optimal concurrency.</value>
        [DataMember(Name="concurrency_quota", EmitDefaultValue=false)]
        public int? ConcurrencyQuota { get; set; }

        /// <summary>
        /// number of bytes of RAM this query may consume; 0 means unlimited.
        /// </summary>
        /// <value>number of bytes of RAM this query may consume; 0 means unlimited.</value>
        [DataMember(Name="memory_bytes_quota", EmitDefaultValue=false)]
        public int? MemoryBytesQuota { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuerySpecificationSpecResources {\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ConcurrencyQuota: ").Append(ConcurrencyQuota).Append("\n");
            sb.Append("  MemoryBytesQuota: ").Append(MemoryBytesQuota).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuerySpecificationSpecResources);
        }

        /// <summary>
        /// Returns true if QuerySpecificationSpecResources instances are equal
        /// </summary>
        /// <param name="input">Instance of QuerySpecificationSpecResources to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuerySpecificationSpecResources input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.ConcurrencyQuota == input.ConcurrencyQuota ||
                    (this.ConcurrencyQuota != null &&
                    this.ConcurrencyQuota.Equals(input.ConcurrencyQuota))
                ) && 
                (
                    this.MemoryBytesQuota == input.MemoryBytesQuota ||
                    (this.MemoryBytesQuota != null &&
                    this.MemoryBytesQuota.Equals(input.MemoryBytesQuota))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.ConcurrencyQuota != null)
                    hashCode = hashCode * 59 + this.ConcurrencyQuota.GetHashCode();
                if (this.MemoryBytesQuota != null)
                    hashCode = hashCode * 59 + this.MemoryBytesQuota.GetHashCode();
                return hashCode;
            }
        }

    }

}
