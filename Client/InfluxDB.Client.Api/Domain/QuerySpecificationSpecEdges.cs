/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// QuerySpecificationSpecEdges
    /// </summary>
    [DataContract]
    public partial class QuerySpecificationSpecEdges :  IEquatable<QuerySpecificationSpecEdges>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuerySpecificationSpecEdges" /> class.
        /// </summary>
        /// <param name="parent">id of parent node of child within graph of opertions.</param>
        /// <param name="child">id of child node of parent within the graph of operations.</param>
        public QuerySpecificationSpecEdges(string parent = default(string), string child = default(string))
        {
            this.Parent = parent;
            this.Child = child;
        }

        /// <summary>
        /// id of parent node of child within graph of opertions
        /// </summary>
        /// <value>id of parent node of child within graph of opertions</value>
        [DataMember(Name="parent", EmitDefaultValue=false)]
        public string Parent { get; set; }

        /// <summary>
        /// id of child node of parent within the graph of operations
        /// </summary>
        /// <value>id of child node of parent within the graph of operations</value>
        [DataMember(Name="child", EmitDefaultValue=false)]
        public string Child { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuerySpecificationSpecEdges {\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Child: ").Append(Child).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuerySpecificationSpecEdges);
        }

        /// <summary>
        /// Returns true if QuerySpecificationSpecEdges instances are equal
        /// </summary>
        /// <param name="input">Instance of QuerySpecificationSpecEdges to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuerySpecificationSpecEdges input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Child == input.Child ||
                    (this.Child != null &&
                    this.Child.Equals(input.Child))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Parent != null)
                    hashCode = hashCode * 59 + this.Parent.GetHashCode();
                if (this.Child != null)
                    hashCode = hashCode * 59 + this.Child.GetHashCode();
                return hashCode;
            }
        }

    }

}
