/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// PkgSummaryDiffVariables
    /// </summary>
    [DataContract]
    public partial class PkgSummaryDiffVariables :  IEquatable<PkgSummaryDiffVariables>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PkgSummaryDiffVariables" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="oldDescription">oldDescription.</param>
        /// <param name="newDescription">newDescription.</param>
        /// <param name="oldArgs">oldArgs.</param>
        /// <param name="newArgs">newArgs.</param>
        public PkgSummaryDiffVariables(string id = default(string), string name = default(string), string oldDescription = default(string), string newDescription = default(string), VariableProperties oldArgs = default(VariableProperties), VariableProperties newArgs = default(VariableProperties))
        {
            this.Id = id;
            this.Name = name;
            this.OldDescription = oldDescription;
            this.NewDescription = newDescription;
            this.OldArgs = oldArgs;
            this.NewArgs = newArgs;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OldDescription
        /// </summary>
        [DataMember(Name="oldDescription", EmitDefaultValue=false)]
        public string OldDescription { get; set; }

        /// <summary>
        /// Gets or Sets NewDescription
        /// </summary>
        [DataMember(Name="newDescription", EmitDefaultValue=false)]
        public string NewDescription { get; set; }

        /// <summary>
        /// Gets or Sets OldArgs
        /// </summary>
        [DataMember(Name="oldArgs", EmitDefaultValue=false)]
        [JsonConverter(typeof(PkgSummary_diff_variablesOldArgsAdapter))]
        public VariableProperties OldArgs { get; set; }

        /// <summary>
        /// Gets or Sets NewArgs
        /// </summary>
        [DataMember(Name="newArgs", EmitDefaultValue=false)]
        [JsonConverter(typeof(PkgSummary_diff_variablesNewArgsAdapter))]
        public VariableProperties NewArgs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PkgSummaryDiffVariables {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OldDescription: ").Append(OldDescription).Append("\n");
            sb.Append("  NewDescription: ").Append(NewDescription).Append("\n");
            sb.Append("  OldArgs: ").Append(OldArgs).Append("\n");
            sb.Append("  NewArgs: ").Append(NewArgs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PkgSummaryDiffVariables);
        }

        /// <summary>
        /// Returns true if PkgSummaryDiffVariables instances are equal
        /// </summary>
        /// <param name="input">Instance of PkgSummaryDiffVariables to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PkgSummaryDiffVariables input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OldDescription == input.OldDescription ||
                    (this.OldDescription != null &&
                    this.OldDescription.Equals(input.OldDescription))
                ) && 
                (
                    this.NewDescription == input.NewDescription ||
                    (this.NewDescription != null &&
                    this.NewDescription.Equals(input.NewDescription))
                ) && 
                (
                    
                    (this.OldArgs != null &&
                    this.OldArgs.Equals(input.OldArgs))
                ) && 
                (
                    
                    (this.NewArgs != null &&
                    this.NewArgs.Equals(input.NewArgs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OldDescription != null)
                    hashCode = hashCode * 59 + this.OldDescription.GetHashCode();
                if (this.NewDescription != null)
                    hashCode = hashCode * 59 + this.NewDescription.GetHashCode();
                if (this.OldArgs != null)
                    hashCode = hashCode * 59 + this.OldArgs.GetHashCode();
                if (this.NewArgs != null)
                    hashCode = hashCode * 59 + this.NewArgs.GetHashCode();
                return hashCode;
            }
        }

    public class PkgSummary_diff_variablesOldArgsAdapter : JsonConverter
    {
        private static readonly Dictionary<string[], Type> Types = new Dictionary<string[], Type>(new Client.DiscriminatorComparer<string>())
        {
            {new []{ "query" }, typeof(QueryVariableProperties)},
            {new []{ "constant" }, typeof(ConstantVariableProperties)},
            {new []{ "map" }, typeof(MapVariableProperties)},
        };

        public override bool CanConvert(Type objectType)
        {
            return false;
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            serializer.Serialize(writer, value);
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            return Deserialize(reader, objectType, serializer);
        }

        private object Deserialize(JsonReader reader, Type objectType, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:

                    var jObject = Newtonsoft.Json.Linq.JObject.Load(reader);

                    var discriminator = new []{ "type" }.Select(key => jObject[key].ToString()).ToArray();

                    Types.TryGetValue(discriminator, out var type);

                    return serializer.Deserialize(jObject.CreateReader(), type);

                case JsonToken.StartArray:
                    return DeserializeArray(reader, objectType, serializer);

                default:
                    return serializer.Deserialize(reader, objectType);
            }
        }

        private IList DeserializeArray(JsonReader reader, Type targetType, JsonSerializer serializer)
        {
            var elementType = targetType.GenericTypeArguments.FirstOrDefault();

            var list = (IList) Activator.CreateInstance(targetType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
            {
                list.Add(Deserialize(reader, elementType, serializer));
            }

            return list;
        }
    }
    public class PkgSummary_diff_variablesNewArgsAdapter : JsonConverter
    {
        private static readonly Dictionary<string[], Type> Types = new Dictionary<string[], Type>(new Client.DiscriminatorComparer<string>())
        {
            {new []{ "query" }, typeof(QueryVariableProperties)},
            {new []{ "constant" }, typeof(ConstantVariableProperties)},
            {new []{ "map" }, typeof(MapVariableProperties)},
        };

        public override bool CanConvert(Type objectType)
        {
            return false;
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            serializer.Serialize(writer, value);
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            return Deserialize(reader, objectType, serializer);
        }

        private object Deserialize(JsonReader reader, Type objectType, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:

                    var jObject = Newtonsoft.Json.Linq.JObject.Load(reader);

                    var discriminator = new []{ "type" }.Select(key => jObject[key].ToString()).ToArray();

                    Types.TryGetValue(discriminator, out var type);

                    return serializer.Deserialize(jObject.CreateReader(), type);

                case JsonToken.StartArray:
                    return DeserializeArray(reader, objectType, serializer);

                default:
                    return serializer.Deserialize(reader, objectType);
            }
        }

        private IList DeserializeArray(JsonReader reader, Type targetType, JsonSerializer serializer)
        {
            var elementType = targetType.GenericTypeArguments.FirstOrDefault();

            var list = (IList) Activator.CreateInstance(targetType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
            {
                list.Add(Deserialize(reader, elementType, serializer));
            }

            return list;
        }
    }
    }

}
