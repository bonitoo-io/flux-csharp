/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// PkgSummaryDiffLabels
    /// </summary>
    [DataContract]
    public partial class PkgSummaryDiffLabels :  IEquatable<PkgSummaryDiffLabels>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PkgSummaryDiffLabels" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="oldDescription">oldDescription.</param>
        /// <param name="newDescription">newDescription.</param>
        /// <param name="oldColor">oldColor.</param>
        /// <param name="newColor">newColor.</param>
        public PkgSummaryDiffLabels(string id = default(string), string name = default(string), string oldDescription = default(string), string newDescription = default(string), string oldColor = default(string), string newColor = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.OldDescription = oldDescription;
            this.NewDescription = newDescription;
            this.OldColor = oldColor;
            this.NewColor = newColor;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OldDescription
        /// </summary>
        [DataMember(Name="oldDescription", EmitDefaultValue=false)]
        public string OldDescription { get; set; }

        /// <summary>
        /// Gets or Sets NewDescription
        /// </summary>
        [DataMember(Name="newDescription", EmitDefaultValue=false)]
        public string NewDescription { get; set; }

        /// <summary>
        /// Gets or Sets OldColor
        /// </summary>
        [DataMember(Name="oldColor", EmitDefaultValue=false)]
        public string OldColor { get; set; }

        /// <summary>
        /// Gets or Sets NewColor
        /// </summary>
        [DataMember(Name="newColor", EmitDefaultValue=false)]
        public string NewColor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PkgSummaryDiffLabels {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OldDescription: ").Append(OldDescription).Append("\n");
            sb.Append("  NewDescription: ").Append(NewDescription).Append("\n");
            sb.Append("  OldColor: ").Append(OldColor).Append("\n");
            sb.Append("  NewColor: ").Append(NewColor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PkgSummaryDiffLabels);
        }

        /// <summary>
        /// Returns true if PkgSummaryDiffLabels instances are equal
        /// </summary>
        /// <param name="input">Instance of PkgSummaryDiffLabels to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PkgSummaryDiffLabels input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OldDescription == input.OldDescription ||
                    (this.OldDescription != null &&
                    this.OldDescription.Equals(input.OldDescription))
                ) && 
                (
                    this.NewDescription == input.NewDescription ||
                    (this.NewDescription != null &&
                    this.NewDescription.Equals(input.NewDescription))
                ) && 
                (
                    this.OldColor == input.OldColor ||
                    (this.OldColor != null &&
                    this.OldColor.Equals(input.OldColor))
                ) && 
                (
                    this.NewColor == input.NewColor ||
                    (this.NewColor != null &&
                    this.NewColor.Equals(input.NewColor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OldDescription != null)
                    hashCode = hashCode * 59 + this.OldDescription.GetHashCode();
                if (this.NewDescription != null)
                    hashCode = hashCode * 59 + this.NewDescription.GetHashCode();
                if (this.OldColor != null)
                    hashCode = hashCode * 59 + this.OldColor.GetHashCode();
                if (this.NewColor != null)
                    hashCode = hashCode * 59 + this.NewColor.GetHashCode();
                return hashCode;
            }
        }

    }

}
