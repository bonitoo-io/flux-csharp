/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// PkgSummarySummary
    /// </summary>
    [DataContract]
    public partial class PkgSummarySummary :  IEquatable<PkgSummarySummary>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PkgSummarySummary" /> class.
        /// </summary>
        /// <param name="buckets">buckets.</param>
        /// <param name="labels">labels.</param>
        /// <param name="dashboards">dashboards.</param>
        /// <param name="labelMappings">labelMappings.</param>
        /// <param name="variables">variables.</param>
        public PkgSummarySummary(List<Bucket> buckets = default(List<Bucket>), List<Label> labels = default(List<Label>), List<PkgSummarySummaryDashboards> dashboards = default(List<PkgSummarySummaryDashboards>), List<PkgSummarySummaryLabelMappings> labelMappings = default(List<PkgSummarySummaryLabelMappings>), List<Variable> variables = default(List<Variable>))
        {
            this.Buckets = buckets;
            this.Labels = labels;
            this.Dashboards = dashboards;
            this.LabelMappings = labelMappings;
            this.Variables = variables;
        }

        /// <summary>
        /// Gets or Sets Buckets
        /// </summary>
        [DataMember(Name="buckets", EmitDefaultValue=false)]
        public List<Bucket> Buckets { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name="labels", EmitDefaultValue=false)]
        public List<Label> Labels { get; set; }

        /// <summary>
        /// Gets or Sets Dashboards
        /// </summary>
        [DataMember(Name="dashboards", EmitDefaultValue=false)]
        public List<PkgSummarySummaryDashboards> Dashboards { get; set; }

        /// <summary>
        /// Gets or Sets LabelMappings
        /// </summary>
        [DataMember(Name="labelMappings", EmitDefaultValue=false)]
        public List<PkgSummarySummaryLabelMappings> LabelMappings { get; set; }

        /// <summary>
        /// Gets or Sets Variables
        /// </summary>
        [DataMember(Name="variables", EmitDefaultValue=false)]
        public List<Variable> Variables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PkgSummarySummary {\n");
            sb.Append("  Buckets: ").Append(Buckets).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Dashboards: ").Append(Dashboards).Append("\n");
            sb.Append("  LabelMappings: ").Append(LabelMappings).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PkgSummarySummary);
        }

        /// <summary>
        /// Returns true if PkgSummarySummary instances are equal
        /// </summary>
        /// <param name="input">Instance of PkgSummarySummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PkgSummarySummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Buckets == input.Buckets ||
                    this.Buckets != null &&
                    this.Buckets.SequenceEqual(input.Buckets)
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    this.Dashboards == input.Dashboards ||
                    this.Dashboards != null &&
                    this.Dashboards.SequenceEqual(input.Dashboards)
                ) && 
                (
                    this.LabelMappings == input.LabelMappings ||
                    this.LabelMappings != null &&
                    this.LabelMappings.SequenceEqual(input.LabelMappings)
                ) && 
                (
                    this.Variables == input.Variables ||
                    this.Variables != null &&
                    this.Variables.SequenceEqual(input.Variables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Buckets != null)
                    hashCode = hashCode * 59 + this.Buckets.GetHashCode();
                if (this.Labels != null)
                    hashCode = hashCode * 59 + this.Labels.GetHashCode();
                if (this.Dashboards != null)
                    hashCode = hashCode * 59 + this.Dashboards.GetHashCode();
                if (this.LabelMappings != null)
                    hashCode = hashCode * 59 + this.LabelMappings.GetHashCode();
                if (this.Variables != null)
                    hashCode = hashCode * 59 + this.Variables.GetHashCode();
                return hashCode;
            }
        }

    }

}
